--- original/net/minecraft/client/renderer/ThreadDownloadImageData.java
+++ changed/net/minecraft/client/renderer/ThreadDownloadImageData.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer;
 
+import cc.hyperium.utils.thread.ThreadDownloadImageDataHook;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.IOException;
@@ -22,9 +23,9 @@
 public class ThreadDownloadImageData extends SimpleTexture {
     private static final Logger logger = LogManager.getLogger();
     private static final AtomicInteger threadDownloadCounter = new AtomicInteger(0);
-    private final File cacheFile;
-    private final String imageUrl;
-    private final IImageBuffer imageBuffer;
+    public final File cacheFile;
+    public final String imageUrl;
+    public final IImageBuffer imageBuffer;
     private BufferedImage bufferedImage;
     private Thread imageThread;
     private boolean textureUploaded;
@@ -88,45 +89,6 @@
     }
 
     protected void loadTextureFromServer() {
-        this.imageThread = new Thread("Texture Downloader #" + threadDownloadCounter.incrementAndGet()) {
-            public void run() {
-                HttpURLConnection httpurlconnection = null;
-                ThreadDownloadImageData.logger.debug("Downloading http texture from {} to {}", new Object[] {ThreadDownloadImageData.this.imageUrl, ThreadDownloadImageData.this.cacheFile});
-
-                try {
-                    httpurlconnection = (HttpURLConnection)(new URL(ThreadDownloadImageData.this.imageUrl)).openConnection(Minecraft.getMinecraft().getProxy());
-                    httpurlconnection.setDoInput(true);
-                    httpurlconnection.setDoOutput(false);
-                    httpurlconnection.connect();
-
-                    if (httpurlconnection.getResponseCode() / 100 == 2) {
-                        BufferedImage bufferedimage;
-
-                        if (ThreadDownloadImageData.this.cacheFile != null) {
-                            FileUtils.copyInputStreamToFile(httpurlconnection.getInputStream(), ThreadDownloadImageData.this.cacheFile);
-                            bufferedimage = ImageIO.read(ThreadDownloadImageData.this.cacheFile);
-                        } else {
-                            bufferedimage = TextureUtil.readBufferedImage(httpurlconnection.getInputStream());
-                        }
-
-                        if (ThreadDownloadImageData.this.imageBuffer != null) {
-                            bufferedimage = ThreadDownloadImageData.this.imageBuffer.parseUserSkin(bufferedimage);
-                        }
-
-                        ThreadDownloadImageData.this.setBufferedImage(bufferedimage);
-                        return;
-                    }
-                } catch (Exception exception) {
-                    ThreadDownloadImageData.logger.error((String)"Couldn\'t download http texture", (Throwable)exception);
-                    return;
-                } finally {
-                    if (httpurlconnection != null) {
-                        httpurlconnection.disconnect();
-                    }
-                }
-            }
-        };
-        this.imageThread.setDaemon(true);
-        this.imageThread.start();
+        ThreadDownloadImageDataHook.loadMultithreadedTexture(this);
     }
 }
