--- original/net/minecraft/client/gui/GuiPlayerTabOverlay.java
+++ changed/net/minecraft/client/gui/GuiPlayerTabOverlay.java
@@ -1,13 +1,16 @@
 package net.minecraft.client.gui;
 
+import cc.hyperium.Hyperium;
+import cc.hyperium.config.Settings;
+import cc.hyperium.handlers.handlers.data.HypixelAPI;
+import cc.hyperium.mods.levelhead.guis.LevelheadGui;
+import cc.hyperium.utils.ChatColor;
+import cc.hyperium.utils.StaffUtils;
 import com.google.common.collect.ComparisonChain;
 import com.google.common.collect.Ordering;
 import com.mojang.authlib.GameProfile;
-import java.util.Comparator;
-import java.util.List;
+import me.semx11.autotip.Autotip;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.Gui;
-import net.minecraft.client.gui.GuiIngame;
 import net.minecraft.client.network.NetHandlerPlayClient;
 import net.minecraft.client.network.NetworkPlayerInfo;
 import net.minecraft.client.renderer.GlStateManager;
@@ -23,7 +26,14 @@
 import net.minecraft.world.WorldSettings;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.lwjgl.opengl.GL11;
 
+import java.awt.*;
+import java.util.Comparator;
+import java.util.List;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentLinkedDeque;
+
 @SideOnly(Side.CLIENT)
 public class GuiPlayerTabOverlay extends Gui {
    private static final Ordering<NetworkPlayerInfo> field_175252_a = Ordering.from(new GuiPlayerTabOverlay.PlayerComparator());
@@ -64,33 +74,60 @@
     * Renders the playerlist, its background, headers and footers.
     */
    public void renderPlayerlist(int width, Scoreboard scoreboardIn, ScoreObjective scoreObjectiveIn) {
-      NetHandlerPlayClient nethandlerplayclient = this.mc.thePlayer.sendQueue;
-      List<NetworkPlayerInfo> list = field_175252_a.<NetworkPlayerInfo>sortedCopy(nethandlerplayclient.getPlayerInfoMap());
+      NetHandlerPlayClient nethandlerplayclient = mc.thePlayer.sendQueue;
+      List<NetworkPlayerInfo> list = field_175252_a.sortedCopy(nethandlerplayclient.getPlayerInfoMap());
       int i = 0;
       int j = 0;
 
-      for(NetworkPlayerInfo networkplayerinfo : list) {
-         int k = this.mc.fontRendererObj.getStringWidth(this.getPlayerName(networkplayerinfo));
+      for (NetworkPlayerInfo networkplayerinfo : list) {
+         int k = mc.fontRendererObj.getStringWidth(getPlayerName(networkplayerinfo));
+
+         if (Settings.SHOW_ONLINE_PLAYERS) {
+            k += LevelheadGui.getLevelheadWidth(networkplayerinfo) + mc.fontRendererObj.getStringWidth("�?�");
+         } else {
+            k += LevelheadGui.getLevelheadWidth(networkplayerinfo);
+         }
+
          i = Math.max(i, k);
-         if(scoreObjectiveIn != null && scoreObjectiveIn.getRenderType() != IScoreObjectiveCriteria.EnumRenderType.HEARTS) {
-            k = this.mc.fontRendererObj.getStringWidth(" " + scoreboardIn.getValueFromObjective(networkplayerinfo.getGameProfile().getName(), scoreObjectiveIn).getScorePoints());
+
+         if (scoreObjectiveIn != null && scoreObjectiveIn.getRenderType() != IScoreObjectiveCriteria.EnumRenderType.HEARTS) {
+            k = mc.fontRendererObj.getStringWidth(" " + scoreboardIn.getValueFromObjective(networkplayerinfo.getGameProfile().getName(), scoreObjectiveIn).getScorePoints());
             j = Math.max(j, k);
          }
       }
 
       list = list.subList(0, Math.min(list.size(), 80));
+
+      if (Settings.FRIENDS_FIRST_IN_TAB) {
+         ConcurrentLinkedDeque<NetworkPlayerInfo> friends = new ConcurrentLinkedDeque<>();
+         List<UUID> friendUUIDList = HypixelAPI.INSTANCE.getListOfCurrentUsersFriends();
+
+         for (NetworkPlayerInfo networkPlayerInfo : list) {
+            UUID id = networkPlayerInfo.getGameProfile().getId();
+            if (friendUUIDList.contains(id)) {
+               friends.add(networkPlayerInfo);
+            }
+         }
+
+         list.removeAll(friends);
+         friends.addAll(list);
+         list.clear();
+         list.addAll(friends);
+      }
+
       int l3 = list.size();
       int i4 = l3;
-
       int j4;
-      for(j4 = 1; i4 > 20; i4 = (l3 + j4 - 1) / j4) {
+
+      for (j4 = 1; i4 > 20; i4 = (l3 + j4 - 1) / j4) {
          ++j4;
       }
 
-      boolean flag = this.mc.isIntegratedServerRunning() || this.mc.getNetHandler().getNetworkManager().getIsencrypted();
+      boolean flag = mc.isIntegratedServerRunning() || mc.getNetHandler().getNetworkManager().getIsencrypted();
       int l;
-      if(scoreObjectiveIn != null) {
-         if(scoreObjectiveIn.getRenderType() == IScoreObjectiveCriteria.EnumRenderType.HEARTS) {
+
+      if (scoreObjectiveIn != null) {
+         if (scoreObjectiveIn.getRenderType() == IScoreObjectiveCriteria.EnumRenderType.HEARTS) {
             l = 90;
          } else {
             l = j;
@@ -99,126 +136,202 @@
          l = 0;
       }
 
-      int i1 = Math.min(j4 * ((flag?9:0) + i + l + 13), width - 50) / j4;
+      int i1 = Math.min(j4 * ((flag ? 9 : 0) + i + l + 13), width - 50) / j4;
       int j1 = width / 2 - (i1 * j4 + (j4 - 1) * 5) / 2;
       int k1 = 10;
       int l1 = i1 * j4 + (j4 - 1) * 5;
-      List<String> list1 = null;
-      List<String> list2 = null;
-      if(this.header != null) {
-         list1 = this.mc.fontRendererObj.listFormattedStringToWidth(this.header.getFormattedText(), width - 50);
+      List<String> headerList = null;
+      List<String> footerList = null;
 
-         for(String s : list1) {
-            l1 = Math.max(l1, this.mc.fontRendererObj.getStringWidth(s));
+      if (header != null) {
+         headerList = mc.fontRendererObj.listFormattedStringToWidth(header.getFormattedText(), width - 50);
+
+         for (String s : headerList) {
+            l1 = Math.max(l1, mc.fontRendererObj.getStringWidth(s));
          }
       }
 
-      if(this.footer != null) {
-         list2 = this.mc.fontRendererObj.listFormattedStringToWidth(this.footer.getFormattedText(), width - 50);
+      if (footer != null) {
+         footerList = mc.fontRendererObj.listFormattedStringToWidth(footer.getFormattedText(), width - 50);
 
-         for(String s2 : list2) {
-            l1 = Math.max(l1, this.mc.fontRendererObj.getStringWidth(s2));
+         for (String s2 : footerList) {
+            l1 = Math.max(l1, mc.fontRendererObj.getStringWidth(s2));
          }
       }
 
-      if(list1 != null) {
-         drawRect(width / 2 - l1 / 2 - 1, k1 - 1, width / 2 + l1 / 2 + 1, k1 + list1.size() * this.mc.fontRendererObj.FONT_HEIGHT, Integer.MIN_VALUE);
+      if (headerList != null) {
+         Gui.drawRect(width / 2 - l1 / 2 - 1, k1 - 1, width / 2 + l1 / 2 + 1, k1 + headerList.size() * mc.fontRendererObj.FONT_HEIGHT, Integer.MIN_VALUE);
 
-         for(String s3 : list1) {
-            int i2 = this.mc.fontRendererObj.getStringWidth(s3);
-            this.mc.fontRendererObj.drawStringWithShadow(s3, (float)(width / 2 - i2 / 2), (float)k1, -1);
-            k1 += this.mc.fontRendererObj.FONT_HEIGHT;
+         for (String s3 : headerList) {
+            int i2 = mc.fontRendererObj.getStringWidth(s3);
+            mc.fontRendererObj.drawStringWithShadow(s3, (float) (width / 2 - i2 / 2), (float) k1, -1);
+            k1 += mc.fontRendererObj.FONT_HEIGHT;
          }
 
          ++k1;
       }
 
-      drawRect(width / 2 - l1 / 2 - 1, k1 - 1, width / 2 + l1 / 2 + 1, k1 + i4 * 9, Integer.MIN_VALUE);
+      Gui.drawRect(width / 2 - l1 / 2 - 1, k1 - 1, width / 2 + l1 / 2 + 1, k1 + i4 * 9, Integer.MIN_VALUE);
 
-      for(int k4 = 0; k4 < l3; ++k4) {
+      for (int k4 = 0; k4 < l3; ++k4) {
          int l4 = k4 / i4;
          int i5 = k4 % i4;
          int j2 = j1 + l4 * i1 + l4 * 5;
          int k2 = k1 + i5 * 9;
-         drawRect(j2, k2, j2 + i1, k2 + 8, 553648127);
+         Gui.drawRect(j2, k2, j2 + i1, k2 + 8, 553648127);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          GlStateManager.enableAlpha();
          GlStateManager.enableBlend();
-         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
-         if(k4 < list.size()) {
-            NetworkPlayerInfo networkplayerinfo1 = (NetworkPlayerInfo)list.get(k4);
-            String s1 = this.getPlayerName(networkplayerinfo1);
+         GlStateManager.tryBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);
+
+         if (k4 < list.size()) {
+            NetworkPlayerInfo networkplayerinfo1 = list.get(k4);
+            String s1 = getPlayerName(networkplayerinfo1);
             GameProfile gameprofile = networkplayerinfo1.getGameProfile();
-            if(flag) {
-               EntityPlayer entityplayer = this.mc.theWorld.getPlayerEntityByUUID(gameprofile.getId());
-               boolean flag1 = entityplayer != null && entityplayer.isWearing(EnumPlayerModelParts.CAPE) && (gameprofile.getName().equals("Dinnerbone") || gameprofile.getName().equals("Grumm"));
-               this.mc.getTextureManager().bindTexture(networkplayerinfo1.getLocationSkin());
-               int l2 = 8 + (flag1?8:0);
-               int i3 = 8 * (flag1?-1:1);
-               Gui.drawScaledCustomSizeModalRect(j2, k2, 8.0F, (float)l2, 8, i3, 8, 8, 64.0F, 64.0F);
-               if(entityplayer != null && entityplayer.isWearing(EnumPlayerModelParts.HAT)) {
-                  int j3 = 8 + (flag1?8:0);
-                  int k3 = 8 * (flag1?-1:1);
-                  Gui.drawScaledCustomSizeModalRect(j2, k2, 40.0F, (float)j3, 8, k3, 8, 8, 64.0F, 64.0F);
+
+            if (flag) {
+               EntityPlayer entityplayer = mc.theWorld.getPlayerEntityByUUID(gameprofile.getId());
+               boolean flag1 = entityplayer != null && entityplayer.isWearing(EnumPlayerModelParts.CAPE) &&
+                       (gameprofile.getName().equals("Dinnerbone") || gameprofile.getName().equals("Grumm"));
+               mc.getTextureManager().bindTexture(networkplayerinfo1.getLocationSkin());
+               int l2 = 8 + (flag1 ? 8 : 0);
+               int i3 = 8 * (flag1 ? -1 : 1);
+               Gui.drawScaledCustomSizeModalRect(j2, k2, 8.0F, (float) l2, 8, i3, 8, 8, 64.0F, 64.0F);
+
+               if (entityplayer != null && entityplayer.isWearing(EnumPlayerModelParts.HAT)) {
+                  int j3 = 8 + (flag1 ? 8 : 0);
+                  int k3 = 8 * (flag1 ? -1 : 1);
+                  Gui.drawScaledCustomSizeModalRect(j2, k2, 40.0F, (float) j3, 8, k3, 8, 8, 64.0F, 64.0F);
                }
 
                j2 += 9;
             }
 
-            if(networkplayerinfo1.getGameType() == WorldSettings.GameType.SPECTATOR) {
+            int renderX = j2 + mc.fontRendererObj.getStringWidth(s1) + 2;
+
+            if (Settings.SHOW_ONLINE_PLAYERS) {
+               String s = "�?�";
+
+               boolean online = mc.getSession().getProfile().getId() == gameprofile.getId() || Hyperium.INSTANCE.getHandlers().getStatusHandler().isOnline(gameprofile.getId());
+
+               if (StaffUtils.isStaff(gameprofile.getId())) {
+                  StaffUtils.DotColour colour = StaffUtils.getColor(gameprofile.getId());
+                  if (colour.isChroma) {
+                     drawChromaWaveString(s, renderX, (k2 - 2));
+                  } else {
+                     String format = StaffUtils.getColor(gameprofile.getId()).baseColour + s;
+                     mc.fontRendererObj.drawString(format, renderX, (k2 - 2), Color.WHITE.getRGB());
+                  }
+               } else {
+                  String format = online ? ChatColor.GREEN + s : ChatColor.RED + s;
+                  mc.fontRendererObj.drawString(format, renderX, (k2 - 2), Color.WHITE.getRGB());
+               }
+            }
+
+            if (networkplayerinfo1.getGameType() == WorldSettings.GameType.SPECTATOR) {
                s1 = EnumChatFormatting.ITALIC + s1;
-               this.mc.fontRendererObj.drawStringWithShadow(s1, (float)j2, (float)k2, -1862270977);
+               mc.fontRendererObj.drawStringWithShadow(s1, (float) j2, (float) k2, -1862270977);
             } else {
-               this.mc.fontRendererObj.drawStringWithShadow(s1, (float)j2, (float)k2, -1);
+               mc.fontRendererObj.drawStringWithShadow(s1, (float) j2, (float) k2, -1);
             }
 
-            if(scoreObjectiveIn != null && networkplayerinfo1.getGameType() != WorldSettings.GameType.SPECTATOR) {
+            if (scoreObjectiveIn != null && networkplayerinfo1.getGameType() != WorldSettings.GameType.SPECTATOR) {
                int k5 = j2 + i + 1;
                int l5 = k5 + l;
-               if(l5 - k5 > 5) {
-                  this.drawScoreboardValues(scoreObjectiveIn, k2, gameprofile.getName(), k5, l5, networkplayerinfo1);
+
+               if (l5 - k5 > 5) {
+                  drawScoreboardValues(scoreObjectiveIn, k2, gameprofile.getName(), k5, l5, networkplayerinfo1);
                }
             }
 
-            this.drawPing(i1, j2 - (flag?9:0), k2, networkplayerinfo1);
+            drawPing(i1, j2 - (flag ? 9 : 0), k2, networkplayerinfo1);
          }
       }
 
-      if(list2 != null) {
+      if (footerList != null) {
          k1 = k1 + i4 * 9 + 1;
-         drawRect(width / 2 - l1 / 2 - 1, k1 - 1, width / 2 + l1 / 2 + 1, k1 + list2.size() * this.mc.fontRendererObj.FONT_HEIGHT, Integer.MIN_VALUE);
+         Gui.drawRect(width / 2 - l1 / 2 - 1, k1 - 1, width / 2 + l1 / 2 + 1, k1 + footerList.size() * mc.fontRendererObj.FONT_HEIGHT, Integer.MIN_VALUE);
 
-         for(String s4 : list2) {
-            int j5 = this.mc.fontRendererObj.getStringWidth(s4);
-            this.mc.fontRendererObj.drawStringWithShadow(s4, (float)(width / 2 - j5 / 2), (float)k1, -1);
-            k1 += this.mc.fontRendererObj.FONT_HEIGHT;
+         for (String s4 : footerList) {
+            int j5 = mc.fontRendererObj.getStringWidth(s4);
+            mc.fontRendererObj.drawStringWithShadow(s4, (float) (width / 2 - j5 / 2), (float) k1, -1);
+            k1 += mc.fontRendererObj.FONT_HEIGHT;
          }
       }
+   }
 
+   private void drawChromaWaveString(String text, int xIn, int y) {
+      FontRenderer renderer = Minecraft.getMinecraft().fontRendererObj;
+      int x = xIn;
+      for (char c : text.toCharArray()) {
+         long dif = (x * 10) - (y * 10);
+         long l = System.currentTimeMillis() - dif;
+         float ff = 2000.0F;
+         int i = Color.HSBtoRGB((float) (l % (int) ff) / ff, 0.8F, 0.8F);
+         String tmp = String.valueOf(c);
+         renderer.drawString(tmp, (float) ((double) x), (float) ((double) y), i, false);
+         x += (double) renderer.getCharWidth(c);
+      }
    }
 
-   protected void drawPing(int p_175245_1_, int p_175245_2_, int p_175245_3_, NetworkPlayerInfo networkPlayerInfoIn) {
+   protected void drawPing(int p_175245_1_, int p_175245_2_, int yIn, NetworkPlayerInfo networkPlayerInfoIn) {
+      LevelheadGui.drawPingHook(p_175245_1_, p_175245_2_, yIn, networkPlayerInfoIn);
+
+      final int ping = networkPlayerInfoIn.getResponseTime();
+      final int x = p_175245_2_ + p_175245_1_ - (mc.fontRendererObj.getStringWidth(ping + "") >> 1) - 2;
+      final int y = yIn + (mc.fontRendererObj.FONT_HEIGHT >> 2);
+      if (Settings.NUMBER_PING) {
+         int colour;
+
+         if (ping > 500) {
+            colour = 11141120;
+         } else if (ping > 300) {
+            colour = 11184640;
+         } else if (ping > 200) {
+            colour = 11193344;
+         } else if (ping > 135) {
+            colour = 2128640;
+         } else if (ping > 70) {
+            colour = 39168;
+         } else if (ping >= 0) {
+            colour = 47872;
+         } else {
+            colour = 11141120;
+         }
+
+         if (ping >= 0 && ping < 10000) {
+            GlStateManager.pushMatrix();
+            GlStateManager.scale(0.5f, 0.5f, 0.5f);
+            mc.fontRendererObj.drawString("   " + ping + "", (2 * x) - 10, (2 * y), colour);
+            GlStateManager.scale(2.0f, 2.0f, 2.0f);
+            GlStateManager.popMatrix();
+         }
+
+         return;
+      }
+
       GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-      this.mc.getTextureManager().bindTexture(icons);
+      mc.getTextureManager().bindTexture(Gui.icons);
       int i = 0;
-      int j = 0;
-      if(networkPlayerInfoIn.getResponseTime() < 0) {
+      int j;
+
+      if (ping < 0) {
          j = 5;
-      } else if(networkPlayerInfoIn.getResponseTime() < 150) {
+      } else if (ping < 150) {
          j = 0;
-      } else if(networkPlayerInfoIn.getResponseTime() < 300) {
+      } else if (ping < 300) {
          j = 1;
-      } else if(networkPlayerInfoIn.getResponseTime() < 600) {
+      } else if (ping < 600) {
          j = 2;
-      } else if(networkPlayerInfoIn.getResponseTime() < 1000) {
+      } else if (ping < 1000) {
          j = 3;
       } else {
          j = 4;
       }
 
-      this.zLevel += 100.0F;
-      this.drawTexturedModalRect(p_175245_2_ + p_175245_1_ - 11, p_175245_3_, 0 + i * 10, 176 + j * 8, 10, 8);
-      this.zLevel -= 100.0F;
+      zLevel = zLevel + 100.0F;
+      drawTexturedModalRect(p_175245_2_ + p_175245_1_ - 5, yIn, i * 10, 176 + j * 8, 10, 8);
+      zLevel = zLevel - 100.0F;
    }
 
    private void drawScoreboardValues(ScoreObjective p_175247_1_, int p_175247_2_, String p_175247_3_, int p_175247_4_, int p_175247_5_, NetworkPlayerInfo p_175247_6_) {
@@ -296,6 +409,7 @@
    }
 
    public void setHeader(IChatComponent headerIn) {
+      Autotip.tabHeader = headerIn;
       this.header = headerIn;
    }
 
