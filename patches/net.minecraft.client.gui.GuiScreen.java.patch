--- original/net/minecraft/client/gui/GuiScreen.java
+++ changed/net/minecraft/client/gui/GuiScreen.java
@@ -1,5 +1,16 @@
 package net.minecraft.client.gui;
 
+import cc.hyperium.Hyperium;
+import cc.hyperium.config.Settings;
+import cc.hyperium.event.EventBus;
+import cc.hyperium.event.gui.GuiClickEvent;
+import cc.hyperium.event.gui.GuiDrawScreenEvent;
+import cc.hyperium.event.gui.GuiKeyTypedEvent;
+import cc.hyperium.event.gui.InitGuiEvent;
+import cc.hyperium.event.interact.ActionPerformedEvent;
+import cc.hyperium.gui.GuiHyperiumScreen;
+import cc.hyperium.gui.tooltips.ScrollableTooltips;
+import com.chattriggers.ctjs.triggers.TriggerType;
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
@@ -76,6 +87,8 @@
      * Draws the screen and all the components in it. Args : mouseX, mouseY, renderPartialTicks
      */
     public void drawScreen(int mouseX, int mouseY, float partialTicks) {
+        // Hyperium
+        EventBus.INSTANCE.post(new GuiDrawScreenEvent(this, mouseX, mouseY, partialTicks));
         for (int i = 0; i < this.buttonList.size(); ++i) {
             ((GuiButton)this.buttonList.get(i)).drawButton(this.mc, mouseX, mouseY);
         }
@@ -90,6 +103,8 @@
      * KeyListener.keyTyped(KeyEvent e). Args : character (character on the key), keyCode (lwjgl Keyboard key code)
      */
     protected void keyTyped(char typedChar, int keyCode) throws IOException {
+        // Hyperium
+        EventBus.INSTANCE.post(new GuiKeyTypedEvent(this, typedChar, keyCode));
         if (keyCode == 1) {
             this.mc.displayGuiScreen((GuiScreen)null);
 
@@ -156,70 +171,8 @@
      * Draws a List of strings as a tooltip. Every entry is drawn on a seperate line.
      */
     protected void drawHoveringText(List<String> textLines, int x, int y) {
-        if (!textLines.isEmpty()) {
-            GlStateManager.disableRescaleNormal();
-            RenderHelper.disableStandardItemLighting();
-            GlStateManager.disableLighting();
-            GlStateManager.disableDepth();
-            int i = 0;
-
-            for (String s : textLines) {
-                int j = this.fontRendererObj.getStringWidth(s);
-
-                if (j > i) {
-                    i = j;
-                }
-            }
-
-            int l1 = x + 12;
-            int i2 = y - 12;
-            int k = 8;
-
-            if (textLines.size() > 1) {
-                k += 2 + (textLines.size() - 1) * 10;
-            }
-
-            if (l1 + i > this.width) {
-                l1 -= 28 + i;
-            }
-
-            if (i2 + k + 6 > this.height) {
-                i2 = this.height - k - 6;
-            }
-
-            this.zLevel = 300.0F;
-            this.itemRender.zLevel = 300.0F;
-            int l = -267386864;
-            this.drawGradientRect(l1 - 3, i2 - 4, l1 + i + 3, i2 - 3, l, l);
-            this.drawGradientRect(l1 - 3, i2 + k + 3, l1 + i + 3, i2 + k + 4, l, l);
-            this.drawGradientRect(l1 - 3, i2 - 3, l1 + i + 3, i2 + k + 3, l, l);
-            this.drawGradientRect(l1 - 4, i2 - 3, l1 - 3, i2 + k + 3, l, l);
-            this.drawGradientRect(l1 + i + 3, i2 - 3, l1 + i + 4, i2 + k + 3, l, l);
-            int i1 = 1347420415;
-            int j1 = (i1 & 16711422) >> 1 | i1 & -16777216;
-            this.drawGradientRect(l1 - 3, i2 - 3 + 1, l1 - 3 + 1, i2 + k + 3 - 1, i1, j1);
-            this.drawGradientRect(l1 + i + 2, i2 - 3 + 1, l1 + i + 3, i2 + k + 3 - 1, i1, j1);
-            this.drawGradientRect(l1 - 3, i2 - 3, l1 + i + 3, i2 - 3 + 1, i1, i1);
-            this.drawGradientRect(l1 - 3, i2 + k + 2, l1 + i + 3, i2 + k + 3, j1, j1);
-
-            for (int k1 = 0; k1 < textLines.size(); ++k1) {
-                String s1 = (String)textLines.get(k1);
-                this.fontRendererObj.drawStringWithShadow(s1, (float)l1, (float)i2, -1);
-
-                if (k1 == 0) {
-                    i2 += 2;
-                }
-
-                i2 += 10;
-            }
-
-            this.zLevel = 0.0F;
-            this.itemRender.zLevel = 0.0F;
-            GlStateManager.enableLighting();
-            GlStateManager.enableDepth();
-            RenderHelper.enableStandardItemLighting();
-            GlStateManager.enableRescaleNormal();
-        }
+        // Hyperium
+        ScrollableTooltips.drawScrollableHoveringText(textLines, x, y, width, height, -1, fontRendererObj);
     }
 
     /**
@@ -351,6 +304,7 @@
                 } else if (clickevent.getAction() == ClickEvent.Action.SUGGEST_COMMAND) {
                     this.setText(clickevent.getValue(), true);
                 } else if (clickevent.getAction() == ClickEvent.Action.RUN_COMMAND) {
+                    Hyperium.INSTANCE.getHandlers().getHyperiumCommandHandler().runningCommand = true; // Hyperium
                     this.sendChatMessage(clickevent.getValue(), false);
                 } else if (clickevent.getAction() == ClickEvent.Action.TWITCH_USER_INFO) {
                     ChatUserInfo chatuserinfo = this.mc.getTwitchStream().func_152926_a(clickevent.getValue());
@@ -379,6 +333,8 @@
     }
 
     public void sendChatMessage(String msg, boolean addToChat) {
+        TriggerType.MESSAGE_SENT.triggerAll(addToChat, msg); // Hyperium
+
         if (addToChat) {
             this.mc.ingameGUI.getChatGUI().addToSentMessages(msg);
         }
@@ -390,6 +346,12 @@
      * Called when the mouse is clicked. Args : mouseX, mouseY, clickedButton
      */
     protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
+        // Hyperium start
+        GuiClickEvent event = new GuiClickEvent(mouseX, mouseY, mouseButton, this);
+        EventBus.INSTANCE.post(event);
+        if (event.isCancelled()) return;
+        // Hyperium end
+
         if (mouseButton == 0) {
             for (int i = 0; i < this.buttonList.size(); ++i) {
                 GuiButton guibutton = (GuiButton)this.buttonList.get(i);
@@ -424,6 +386,10 @@
      * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
      */
     protected void actionPerformed(GuiButton button) throws IOException {
+        // Hyperium
+        ActionPerformedEvent event = new ActionPerformedEvent(this, button);
+        EventBus.INSTANCE.post(event);
+        if (event.isCancelled()) return;
     }
 
     /**
@@ -452,6 +418,8 @@
      * resizes, the buttonList is cleared beforehand.
      */
     public void initGui() {
+        // Hyperium
+        EventBus.INSTANCE.post(new InitGuiEvent(this));
     }
 
     /**
@@ -504,9 +472,13 @@
      * Handles keyboard input.
      */
     public void handleKeyboardInput() throws IOException {
-        if (Keyboard.getEventKeyState()) {
-            this.keyTyped(Keyboard.getEventCharacter(), Keyboard.getEventKey());
+        // Hyperium start
+        char character = Keyboard.getEventCharacter();
+
+        if (Keyboard.getEventKey() == 0 && character >= 32 || Keyboard.getEventKeyState()) {
+            this.keyTyped(character, Keyboard.getEventKey());
         }
+        // Hyperium end
 
         this.mc.dispatchKeypresses();
     }
@@ -527,6 +499,7 @@
      * Draws either a gradient over the background screen (when it exists) or a flat gradient over background.png
      */
     public void drawDefaultBackground() {
+        if (mc.theWorld != null && Settings.FAST_CONTAINER) return; // Hyperium
         this.drawWorldBackground(0);
     }
 
@@ -546,8 +519,7 @@
         GlStateManager.disableFog();
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
-        this.mc.getTextureManager().bindTexture(optionsBackground);
-        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+        // Hyperium - Remove previous rendering
         float f = 32.0F;
         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
         worldrenderer.pos(0.0D, (double)this.height, 0.0D).tex(0.0D, (double)((float)this.height / 32.0F + (float)tint)).color(64, 64, 64, 255).endVertex();
@@ -555,6 +527,9 @@
         worldrenderer.pos((double)this.width, 0.0D, 0.0D).tex((double)((float)this.width / 32.0F), (double)tint).color(64, 64, 64, 255).endVertex();
         worldrenderer.pos(0.0D, 0.0D, 0.0D).tex(0.0D, (double)tint).color(64, 64, 64, 255).endVertex();
         tessellator.draw();
+
+        // Hyperium
+        GuiHyperiumScreen.renderBackgroundImage();
     }
 
     /**
@@ -629,4 +604,9 @@
     public void onResize(Minecraft mcIn, int w, int h) {
         this.setWorldAndResolution(mcIn, w, h);
     }
+
+    // Hyperium
+    public List<GuiButton> getButtonList() {
+        return buttonList;
+    }
 }
