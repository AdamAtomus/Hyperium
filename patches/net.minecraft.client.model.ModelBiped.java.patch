--- original/net/minecraft/client/model/ModelBiped.java
+++ changed/net/minecraft/client/model/ModelBiped.java
@@ -1,5 +1,11 @@
 package net.minecraft.client.model;
 
+import cc.hyperium.config.Settings;
+import cc.hyperium.event.EventBus;
+import cc.hyperium.event.model.PostCopyPlayerModelAnglesEvent;
+import cc.hyperium.event.model.PreCopyPlayerModelAnglesEvent;
+import cc.hyperium.utils.model.IModelBiped;
+import net.minecraft.client.entity.AbstractClientPlayer;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.Entity;
 import net.minecraft.util.MathHelper;
@@ -7,7 +13,7 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class ModelBiped extends ModelBase {
+public class ModelBiped extends ModelBase implements IModelBiped {
     public ModelRenderer bipedHead;
     /** The Biped's Headwear. Used for the outer layer of player skins. */
     public ModelRenderer bipedHeadwear;
@@ -36,6 +42,11 @@
         this(modelSize, 0.0F, 64, 32);
     }
 
+    ModelRenderer bipedLeftForeArm;
+    ModelRenderer bipedRightForeArm;
+    ModelRenderer bipedLeftLowerLeg;
+    ModelRenderer bipedRightLowerLeg;
+
     public ModelBiped(float modelSize, float p_i1149_2_, int textureWidthIn, int textureHeightIn) {
         this.textureWidth = textureWidthIn;
         this.textureHeight = textureHeightIn;
@@ -62,11 +73,54 @@
         this.bipedLeftLeg.mirror = true;
         this.bipedLeftLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, modelSize);
         this.bipedLeftLeg.setRotationPoint(1.9F, 12.0F + p_i1149_2_, 0.0F);
+
+        if (getClass().equals(ModelBiped.class)) {
+            bipedRightArm = new ModelRenderer(this, 40, 16);
+            bipedRightArm.addBox(-3.0F, -2.0F, -2.0F, 4, 6, 4, modelSize);
+            bipedRightArm.setRotationPoint(-5.0F, 2.0F + p_i1149_2_, 0.0F);
+            bipedRightForeArm = new ModelRenderer(this, 40, 22);
+            bipedRightForeArm.addBox(-3.0F, -2.0F, -2.0F, 4, 6, 4, modelSize);
+            bipedRightForeArm.setRotationPoint(-5.0F, 2.0F + p_i1149_2_, 0.0F);
+            bipedLeftArm = new ModelRenderer(this, 40, 16);
+            bipedLeftArm.mirror = true;
+            bipedLeftArm.addBox(-1.0F, -2.0F, -2.0F, 4, 6, 4, modelSize);
+            bipedLeftArm.setRotationPoint(5.0F, 2.0F + p_i1149_2_, 0.0F);
+            bipedLeftForeArm = new ModelRenderer(this, 40, 22);
+            bipedLeftForeArm.mirror = true;
+            bipedLeftForeArm.addBox(-1.0F, -2.0F, -2.0F, 4, 6, 4, modelSize);
+            bipedLeftForeArm.setRotationPoint(5.0F, 2.0F + p_i1149_2_, 0.0F);
+
+            bipedRightLeg = new ModelRenderer(this, 0, 16);
+            bipedRightLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, modelSize);
+            bipedRightLeg.setRotationPoint(-1.9F, 12.0F + p_i1149_2_, 0.0F);
+            bipedRightLowerLeg = new ModelRenderer(this, 0, 22);
+            bipedRightLowerLeg.addBox(-2.0F, 6.0F, -2.0F, 4, 6, 4, modelSize);
+            bipedRightLowerLeg.setRotationPoint(-1.9F, 12.0F + p_i1149_2_, 0.0F);
+
+            bipedLeftLeg = new ModelRenderer(this, 0, 16);
+            bipedLeftLeg.mirror = true;
+            bipedLeftLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 6, 4, modelSize);
+            bipedLeftLeg.setRotationPoint(1.9F, 12.0F + p_i1149_2_, 0.0F);
+            bipedLeftLowerLeg = new ModelRenderer(this, 0, 22);
+            bipedLeftLowerLeg.mirror = true;
+            bipedLeftLowerLeg.addBox(-2.0F, 6.0F, -2.0F, 4, 6, 4, modelSize);
+            bipedLeftLowerLeg.setRotationPoint(1.9F, 12.0F + p_i1149_2_, 0.0F);
+
+            fixTopAndBottomOfLimbWrongTextures(bipedLeftForeArm, bipedRightForeArm, bipedLeftLowerLeg,
+                                               bipedRightLowerLeg);
+        }
     }
 
     /**
      * Sets the models various rotation angles then renders the model.
      */
+    void fixTopAndBottomOfLimbWrongTextures(ModelRenderer... models) {
+        for (ModelRenderer model : models) {
+            ModelBox box = model.cubeList.get(0);
+            box.offsetTextureQuad(model, 3, 0.0F, -6.0F);
+        }
+    }
+
     public void render(Entity entityIn, float p_78088_2_, float p_78088_3_, float p_78088_4_, float p_78088_5_, float p_78088_6_, float scale) {
         this.setRotationAngles(p_78088_2_, p_78088_3_, p_78088_4_, p_78088_5_, p_78088_6_, scale, entityIn);
         GlStateManager.pushMatrix();
@@ -80,26 +134,21 @@
             GlStateManager.pushMatrix();
             GlStateManager.scale(1.0F / f, 1.0F / f, 1.0F / f);
             GlStateManager.translate(0.0F, 24.0F * scale, 0.0F);
-            this.bipedBody.render(scale);
-            this.bipedRightArm.render(scale);
-            this.bipedLeftArm.render(scale);
-            this.bipedRightLeg.render(scale);
-            this.bipedLeftLeg.render(scale);
-            this.bipedHeadwear.render(scale);
         } else {
             if (entityIn.isSneaking()) {
                 GlStateManager.translate(0.0F, 0.2F, 0.0F);
             }
-
-            this.bipedHead.render(scale);
-            this.bipedBody.render(scale);
-            this.bipedRightArm.render(scale);
-            this.bipedLeftArm.render(scale);
-            this.bipedRightLeg.render(scale);
-            this.bipedLeftLeg.render(scale);
-            this.bipedHeadwear.render(scale);
+            bipedHead.render(scale);
         }
 
+        bipedBody.render(scale);
+        bipedRightArm.render(scale);
+        bipedLeftArm.render(scale);
+        bipedRightLeg.render(scale);
+        bipedLeftLeg.render(scale);
+        bipedHeadwear.render(scale);
+
+        if (getClass().equals(ModelBiped.class)) renderBiped(scale);
         GlStateManager.popMatrix();
     }
 
@@ -108,6 +157,13 @@
      * legs, where par1 represents the time(so that arms and legs swing back and forth) and par2 represents how "far" arms and
      * legs can swing at most.
      */
+    private void renderBiped(float scale) {
+        bipedLeftForeArm.render(scale);
+        bipedRightForeArm.render(scale);
+        bipedLeftLowerLeg.render(scale);
+        bipedRightLowerLeg.render(scale);
+    }
+
     public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, Entity entityIn) {
         this.bipedHead.rotateAngleY = netHeadYaw / (180F / (float)Math.PI);
         this.bipedHead.rotateAngleX = headPitch / (180F / (float)Math.PI);
@@ -121,12 +177,14 @@
         this.bipedLeftLeg.rotateAngleY = 0.0F;
 
         if (this.isRiding) {
-            this.bipedRightArm.rotateAngleX += -((float)Math.PI / 5F);
-            this.bipedLeftArm.rotateAngleX += -((float)Math.PI / 5F);
-            this.bipedRightLeg.rotateAngleX = -((float)Math.PI * 2F / 5F);
-            this.bipedLeftLeg.rotateAngleX = -((float)Math.PI * 2F / 5F);
-            this.bipedRightLeg.rotateAngleY = ((float)Math.PI / 10F);
-            this.bipedLeftLeg.rotateAngleY = -((float)Math.PI / 10F);
+            ModelRenderer bipedRightArm = this.bipedRightArm;
+            bipedRightArm.rotateAngleX -= ((float)Math.PI / 5F);
+            ModelRenderer bipedLeftArm = this.bipedLeftArm;
+            bipedLeftArm.rotateAngleX -= ((float)Math.PI / 5F);
+            bipedRightLeg.rotateAngleX = -((float)Math.PI * 2F / 5F);
+            bipedLeftLeg.rotateAngleX = -((float)Math.PI * 2F / 5F);
+            bipedRightLeg.rotateAngleY = ((float)Math.PI / 10F);
+            bipedLeftLeg.rotateAngleY = -((float)Math.PI / 10F);
         }
 
         if (this.heldItemLeft != 0) {
@@ -145,7 +203,13 @@
             break;
         case 3:
             this.bipedRightArm.rotateAngleX = this.bipedRightArm.rotateAngleX * 0.5F - ((float)Math.PI / 10F) * (float)this.heldItemRight;
-            this.bipedRightArm.rotateAngleY = -0.5235988F;
+
+            if (!Settings.OLD_BLOCKING) {
+                bipedRightArm.rotateAngleY = -0.5235988f;
+                break;
+            }
+
+            break;
         }
 
         this.bipedLeftArm.rotateAngleY = 0.0F;
@@ -157,24 +221,31 @@
             this.bipedRightArm.rotationPointX = -MathHelper.cos(this.bipedBody.rotateAngleY) * 5.0F;
             this.bipedLeftArm.rotationPointZ = -MathHelper.sin(this.bipedBody.rotateAngleY) * 5.0F;
             this.bipedLeftArm.rotationPointX = MathHelper.cos(this.bipedBody.rotateAngleY) * 5.0F;
-            this.bipedRightArm.rotateAngleY += this.bipedBody.rotateAngleY;
-            this.bipedLeftArm.rotateAngleY += this.bipedBody.rotateAngleY;
-            this.bipedLeftArm.rotateAngleX += this.bipedBody.rotateAngleY;
+            ModelRenderer bipedRightArm2 = bipedRightArm;
+            bipedRightArm2.rotateAngleY += bipedBody.rotateAngleY;
+            ModelRenderer bipedLeftArm2 = bipedLeftArm;
+            bipedLeftArm2.rotateAngleY += bipedBody.rotateAngleY;
+            ModelRenderer bipedLeftArm3 = bipedLeftArm;
+            bipedLeftArm3.rotateAngleX += bipedBody.rotateAngleY;
             f = 1.0F - this.swingProgress;
             f = f * f;
             f = f * f;
             f = 1.0F - f;
             float f1 = MathHelper.sin(f * (float)Math.PI);
             float f2 = MathHelper.sin(this.swingProgress * (float)Math.PI) * -(this.bipedHead.rotateAngleX - 0.7F) * 0.75F;
-            this.bipedRightArm.rotateAngleX = (float)((double)this.bipedRightArm.rotateAngleX - ((double)f1 * 1.2D + (double)f2));
-            this.bipedRightArm.rotateAngleY += this.bipedBody.rotateAngleY * 2.0F;
-            this.bipedRightArm.rotateAngleZ += MathHelper.sin(this.swingProgress * (float)Math.PI) * -0.4F;
+            bipedRightArm.rotateAngleX -= (float) (f1 * 1.2 + f2);
+            ModelRenderer bipedRightArm3 = bipedRightArm;
+            bipedRightArm3.rotateAngleY += bipedBody.rotateAngleY * 2.0f;
+            ModelRenderer bipedRightArm4 = bipedRightArm;
+            bipedRightArm4.rotateAngleZ += MathHelper.sin(swingProgress * (float)Math.PI) * -0.4f;
         }
 
         if (this.isSneak) {
             this.bipedBody.rotateAngleX = 0.5F;
-            this.bipedRightArm.rotateAngleX += 0.4F;
-            this.bipedLeftArm.rotateAngleX += 0.4F;
+            ModelRenderer bipedRightArm5 = bipedRightArm;
+            bipedRightArm5.rotateAngleX += 0.4F;
+            ModelRenderer bipedLeftArm4 = bipedLeftArm;
+            bipedLeftArm4.rotateAngleX += 0.4F;
             this.bipedRightLeg.rotationPointZ = 4.0F;
             this.bipedLeftLeg.rotationPointZ = 4.0F;
             this.bipedRightLeg.rotationPointY = 9.0F;
@@ -189,31 +260,66 @@
             this.bipedHead.rotationPointY = 0.0F;
         }
 
-        this.bipedRightArm.rotateAngleZ += MathHelper.cos(ageInTicks * 0.09F) * 0.05F + 0.05F;
-        this.bipedLeftArm.rotateAngleZ -= MathHelper.cos(ageInTicks * 0.09F) * 0.05F + 0.05F;
-        this.bipedRightArm.rotateAngleX += MathHelper.sin(ageInTicks * 0.067F) * 0.05F;
-        this.bipedLeftArm.rotateAngleX -= MathHelper.sin(ageInTicks * 0.067F) * 0.05F;
+        ModelRenderer bipedRightArm6 = bipedRightArm;
+        bipedRightArm6.rotateAngleZ += MathHelper.cos(ageInTicks * 0.09f) * 0.05f + 0.05f;
+        ModelRenderer bipedLeftArm5 = bipedLeftArm;
+        bipedLeftArm5.rotateAngleZ -= MathHelper.cos(ageInTicks * 0.09f) * 0.05f + 0.05f;
+        ModelRenderer bipedRightArm7 = bipedRightArm;
+        bipedRightArm7.rotateAngleX += MathHelper.sin(ageInTicks * 0.067f) * 0.05f;
+        ModelRenderer bipedLeftArm6 = bipedLeftArm;
+        bipedLeftArm6.rotateAngleX -= MathHelper.sin(ageInTicks * 0.067f) * 0.05f;
 
-        if (this.aimedBow) {
-            float f3 = 0.0F;
-            float f4 = 0.0F;
-            this.bipedRightArm.rotateAngleZ = 0.0F;
-            this.bipedLeftArm.rotateAngleZ = 0.0F;
-            this.bipedRightArm.rotateAngleY = -(0.1F - f3 * 0.6F) + this.bipedHead.rotateAngleY;
-            this.bipedLeftArm.rotateAngleY = 0.1F - f3 * 0.6F + this.bipedHead.rotateAngleY + 0.4F;
-            this.bipedRightArm.rotateAngleX = -((float)Math.PI / 2F) + this.bipedHead.rotateAngleX;
-            this.bipedLeftArm.rotateAngleX = -((float)Math.PI / 2F) + this.bipedHead.rotateAngleX;
-            this.bipedRightArm.rotateAngleX -= f3 * 1.2F - f4 * 0.4F;
-            this.bipedLeftArm.rotateAngleX -= f3 * 1.2F - f4 * 0.4F;
-            this.bipedRightArm.rotateAngleZ += MathHelper.cos(ageInTicks * 0.09F) * 0.05F + 0.05F;
-            this.bipedLeftArm.rotateAngleZ -= MathHelper.cos(ageInTicks * 0.09F) * 0.05F + 0.05F;
-            this.bipedRightArm.rotateAngleX += MathHelper.sin(ageInTicks * 0.067F) * 0.05F;
-            this.bipedLeftArm.rotateAngleX -= MathHelper.sin(ageInTicks * 0.067F) * 0.05F;
+        if (aimedBow) {
+            float f4 = 0.0f;
+            float f5 = 0.0f;
+            bipedRightArm.rotateAngleZ = 0.0f;
+            bipedLeftArm.rotateAngleZ = 0.0f;
+            bipedRightArm.rotateAngleY = -(0.1f - f4 * 0.6f) + bipedHead.rotateAngleY;
+            bipedLeftArm.rotateAngleY = 0.1f - f4 * 0.6f + bipedHead.rotateAngleY + 0.4f;
+            bipedRightArm.rotateAngleX = -((float)Math.PI / 2F) + bipedHead.rotateAngleX;
+            bipedLeftArm.rotateAngleX = -((float)Math.PI / 2F) + bipedHead.rotateAngleX;
+            ModelRenderer bipedRightArm8 = bipedRightArm;
+            bipedRightArm8.rotateAngleX -= f4 * 1.2f - f5 * 0.4f;
+            ModelRenderer bipedLeftArm7 = bipedLeftArm;
+            bipedLeftArm7.rotateAngleX -= f4 * 1.2f - f5 * 0.4f;
+            ModelRenderer bipedRightArm9 = bipedRightArm;
+            bipedRightArm9.rotateAngleZ += MathHelper.cos(ageInTicks * 0.09f) * 0.05f + 0.05f;
+            ModelRenderer bipedLeftArm8 = bipedLeftArm;
+            bipedLeftArm8.rotateAngleZ -= MathHelper.cos(ageInTicks * 0.09f) * 0.05f + 0.05f;
+            ModelRenderer bipedRightArm10 = bipedRightArm;
+            bipedRightArm10.rotateAngleX += MathHelper.sin(ageInTicks * 0.067f) * 0.05f;
+            ModelRenderer bipedLeftArm9 = bipedLeftArm;
+            bipedLeftArm9.rotateAngleX -= MathHelper.sin(ageInTicks * 0.067f) * 0.05f;
         }
 
-        copyModelAngles(this.bipedHead, this.bipedHeadwear);
+        copyModelAngles(bipedHead, bipedHeadwear);
+
+        if (getClass().equals(ModelBiped.class)) {
+            boolean isPlayer = entityIn instanceof AbstractClientPlayer;
+
+            if (isPlayer) {
+                EventBus.INSTANCE.post(new PreCopyPlayerModelAnglesEvent(((AbstractClientPlayer) entityIn), this));
+            }
+
+            copyModelAnglesAndOffest(bipedLeftArm, bipedLeftForeArm);
+            copyModelAnglesAndOffest(bipedRightArm, bipedRightForeArm);
+
+            copyModelAnglesAndOffest(bipedLeftLeg, bipedLeftLowerLeg);
+            copyModelAnglesAndOffest(bipedRightLeg, bipedRightLowerLeg);
+
+            if (isPlayer) {
+                EventBus.INSTANCE.post(new PostCopyPlayerModelAnglesEvent(((AbstractClientPlayer) entityIn), this));
+            }
+        }
     }
 
+    void copyModelAnglesAndOffest(ModelRenderer src, ModelRenderer dest) {
+        copyModelAngles(src, dest);
+        dest.offsetX = src.offsetX;
+        dest.offsetY = src.offsetY;
+        dest.offsetZ = src.offsetZ;
+    }
+
     public void setModelAttributes(ModelBase model) {
         super.setModelAttributes(model);
 
@@ -234,9 +340,60 @@
         this.bipedLeftArm.showModel = invisible;
         this.bipedRightLeg.showModel = invisible;
         this.bipedLeftLeg.showModel = invisible;
+
+        if (getClass().equals(ModelBiped.class)) {
+            bipedLeftForeArm.showModel = invisible;
+            bipedRightForeArm.showModel = invisible;
+            bipedLeftLowerLeg.showModel = invisible;
+            bipedRightLowerLeg.showModel = invisible;
+        }
     }
 
     public void postRenderArm(float scale) {
         this.bipedRightArm.postRender(scale);
     }
+
+    public ModelRenderer getBipedRightUpperLeg() {
+        return bipedRightLeg;
+    }
+
+    public ModelRenderer getBipedRightLowerLeg() {
+        return bipedRightLowerLeg;
+    }
+
+    public ModelRenderer getBipedLeftUpperLeg() {
+        return bipedLeftLeg;
+    }
+
+    public ModelRenderer getBipedLeftLowerLeg() {
+        return bipedLeftLowerLeg;
+    }
+
+    public ModelRenderer getBipedRightUpperArm() {
+        return bipedRightArm;
+    }
+
+    public ModelRenderer getBipedRightForeArm() {
+        return bipedRightForeArm;
+    }
+
+    public ModelRenderer getBipedLeftUpperArm() {
+        return bipedLeftArm;
+    }
+
+    public ModelRenderer getBipedLeftForeArm() {
+        return bipedLeftForeArm;
+    }
+
+    public ModelRenderer getBipedBody() {
+        return bipedBody;
+    }
+
+    public ModelRenderer getBipedHead() {
+        return bipedHead;
+    }
+
+    public ModelRenderer getBipedHeadwear() {
+        return bipedHeadwear;
+    }
 }
