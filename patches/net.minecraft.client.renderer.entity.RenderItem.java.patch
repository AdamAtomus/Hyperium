--- original/net/minecraft/client/renderer/entity/RenderItem.java
+++ changed/net/minecraft/client/renderer/entity/RenderItem.java
@@ -1,33 +1,14 @@
 package net.minecraft.client.renderer.entity;
 
-import java.util.List;
-import java.util.concurrent.Callable;
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockDirt;
-import net.minecraft.block.BlockDoublePlant;
-import net.minecraft.block.BlockFlower;
-import net.minecraft.block.BlockHugeMushroom;
-import net.minecraft.block.BlockPlanks;
-import net.minecraft.block.BlockPrismarine;
-import net.minecraft.block.BlockQuartz;
-import net.minecraft.block.BlockRedSandstone;
-import net.minecraft.block.BlockSand;
-import net.minecraft.block.BlockSandStone;
-import net.minecraft.block.BlockSilverfish;
-import net.minecraft.block.BlockStone;
-import net.minecraft.block.BlockStoneBrick;
-import net.minecraft.block.BlockStoneSlab;
-import net.minecraft.block.BlockStoneSlabNew;
-import net.minecraft.block.BlockTallGrass;
-import net.minecraft.block.BlockWall;
+import cc.hyperium.config.Settings;
+import cc.hyperium.mods.glintcolorizer.Colors;
+import cc.hyperium.mods.sk1ercommon.Multithreading;
+import com.github.benmanes.caffeine.cache.Cache;
+import com.github.benmanes.caffeine.cache.Caffeine;
+import net.minecraft.block.*;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
-import net.minecraft.client.renderer.EntityRenderer;
-import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.ItemMeshDefinition;
-import net.minecraft.client.renderer.ItemModelMesher;
-import net.minecraft.client.renderer.Tessellator;
-import net.minecraft.client.renderer.WorldRenderer;
+import net.minecraft.client.renderer.*;
 import net.minecraft.client.renderer.block.model.BakedQuad;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
 import net.minecraft.client.renderer.block.model.ItemTransformVec3f;
@@ -47,19 +28,15 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
-import net.minecraft.item.EnumDyeColor;
-import net.minecraft.item.Item;
-import net.minecraft.item.ItemFishFood;
-import net.minecraft.item.ItemPotion;
-import net.minecraft.item.ItemStack;
-import net.minecraft.util.EnumChatFormatting;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.Vec3i;
+import net.minecraft.item.*;
+import net.minecraft.util.*;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.lwjgl.opengl.GL11;
 
+import java.util.List;
+import java.util.concurrent.Callable;
+
 @SideOnly(Side.CLIENT)
 public class RenderItem implements IResourceManagerReloadListener {
    private static final ResourceLocation RES_ITEM_GLINT = new ResourceLocation("textures/misc/enchanted_item_glint.png");
@@ -76,6 +53,14 @@
       this.registerItems();
    }
 
+   private final int MAX_EFFECTS = 25;
+   private Cache<Integer, Integer> colorCache = Caffeine.newBuilder()
+           .maximumSize(MAX_EFFECTS)
+           .executor(Multithreading.POOL)
+           .build();
+   private boolean wasJustRenderedAsPotion = false; // used to stop pots from rendering twice
+   private boolean isInv = false; // can't pass arguments between 2 @Injects so we have to do this
+
    /**
     * False when the renderer is rendering the item's effects into a GUI
     *  
@@ -135,20 +120,41 @@
             GlStateManager.translate(-0.5F, -0.5F, -0.5F);
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableRescaleNormal();
+
+            if (!isInv && stack.getItem() != null && stack.getItem() instanceof ItemSkull) {
+               GlStateManager.scale(Settings.HEAD_SCALE_FACTOR, Settings.HEAD_SCALE_FACTOR, Settings.HEAD_SCALE_FACTOR);
+            }
+
             TileEntityItemStackRenderer.instance.renderByItem(stack);
          } else {
             GlStateManager.translate(-0.5F, -0.5F, -0.5F);
+
+            wasJustRenderedAsPotion = renderShinyPot(stack, model, isInv);
+            if (!isInv && stack.getItem() != null && stack.getItem() instanceof ItemSkull) {
+               GlStateManager.scale(Settings.HEAD_SCALE_FACTOR, Settings.HEAD_SCALE_FACTOR, Settings.HEAD_SCALE_FACTOR);
+            }
+
             this.renderModel(model, stack);
             if(stack.hasEffect()) {
                this.renderEffect(model);
             }
          }
 
+         if (!isInv && stack.getItem() != null && stack.getItem() instanceof ItemSkull) {
+            GlStateManager.scale(Settings.HEAD_SCALE_FACTOR, Settings.HEAD_SCALE_FACTOR, Settings.HEAD_SCALE_FACTOR);
+         }
+
          GlStateManager.popMatrix();
       }
    }
 
    private void renderEffect(IBakedModel model) {
+      if (wasJustRenderedAsPotion) {
+         return;
+      }
+
+      wasJustRenderedAsPotion = false; // cancel() != return so this still gets executed
+
       GlStateManager.depthMask(false);
       GlStateManager.depthFunc(514);
       GlStateManager.disableLighting();
@@ -309,7 +315,9 @@
       GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
       this.setupGuiTransform(x, y, ibakedmodel.isGui3d());
       ibakedmodel.getItemCameraTransforms().applyTransform(ItemCameraTransforms.TransformType.GUI);
+      isInv = true;
       this.renderItem(stack, ibakedmodel);
+      isInv = false;
       GlStateManager.disableAlpha();
       GlStateManager.disableRescaleNormal();
       GlStateManager.disableLighting();
@@ -980,4 +988,62 @@
    public void onResourceManagerReload(IResourceManager resourceManager) {
       this.itemModelMesher.rebuildCache();
    }
+
+   public boolean renderShinyPot(ItemStack stack, IBakedModel model, boolean isInv) {
+      boolean renderedAsPotion = false;
+      if (Settings.SHINY_POTS && isInv && stack.getItem() != null && stack.getItem() instanceof ItemPotion) {
+         int glintColor = getPotionColor(stack);
+         renderPot(model, glintColor);
+
+         renderedAsPotion = true;
+      }
+      return renderedAsPotion;
+   }
+
+
+   private int getPotionColor(ItemStack item) {
+      if (Settings.SHINY_POTS_MATCH_COLOR) {
+         int potionId = item.getMetadata();
+
+         Integer cached = colorCache.getIfPresent(potionId);
+
+         if (cached != null) {
+            return cached;
+         } else {
+            int color = Items.potionitem.getColorFromItemStack(item, 0) | 0xFF000000;
+            colorCache.put(potionId, color);
+            return color;
+         }
+      } else {
+         return Colors.onepoint8glintcolorI;
+      }
+   }
+
+   private void renderPot(IBakedModel model, int color) {
+      GlStateManager.depthMask(false);
+      GlStateManager.disableLighting();
+      GlStateManager.blendFunc(GL11.GL_SRC_COLOR, 1);
+      Minecraft.getMinecraft().getTextureManager().bindTexture(RES_ITEM_GLINT);
+      GlStateManager.matrixMode(GL11.GL_TEXTURE);
+      GlStateManager.pushMatrix();
+      GlStateManager.scale(8.0F, 8.0F, 8.0F);
+      float f = (float) (Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
+      GlStateManager.translate(f, 0.0F, 0.0F);
+      GlStateManager.rotate(-50.0F, 0.0F, 0.0F, 1.0F);
+      renderModel(model, color);
+      GlStateManager.popMatrix();
+      GlStateManager.pushMatrix();
+      GlStateManager.scale(8.0F, 8.0F, 8.0F);
+      float f1 = (float) (Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
+      GlStateManager.translate(-f1, 0.0F, 0.0F);
+      GlStateManager.rotate(10.0F, 0.0F, 0.0F, 1.0F);
+      renderModel(model, color);
+      GlStateManager.popMatrix();
+      GlStateManager.matrixMode(GL11.GL_MODELVIEW);
+      GlStateManager.blendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+      GlStateManager.enableLighting();
+      GlStateManager.depthMask(true);
+
+      Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
+   }
 }
