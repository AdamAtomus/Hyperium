--- original/net/minecraft/client/renderer/ItemRenderer.java
+++ changed/net/minecraft/client/renderer/ItemRenderer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer;
 
+import cc.hyperium.config.Settings;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -25,6 +26,7 @@
 import net.minecraft.item.EnumAction;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
+import net.minecraft.item.ItemSword;
 import net.minecraft.util.BlockPos;
 import net.minecraft.util.EnumWorldBlockLayer;
 import net.minecraft.util.MathHelper;
@@ -271,11 +273,30 @@
     * Performs transformations prior to the rendering of a held item in first person.
     */
    private void transformFirstPersonItem(float equipProgress, float swingProgress) {
+      if (Settings.OLD_BOW && mc != null && mc.thePlayer != null &&
+              mc.thePlayer.getItemInUse() != null && mc.thePlayer.getItemInUse().getItem() != null &&
+              Item.getIdFromItem(mc.thePlayer.getItemInUse().getItem()) == 261) {
+         GlStateManager.translate(0.0f, 0.05f, 0.04f);
+      }
+
+      if (Settings.OLD_ROD && mc != null && mc.thePlayer != null && mc.thePlayer.getCurrentEquippedItem() != null && mc.thePlayer.getCurrentEquippedItem().getItem() !=
+              null && Item.getIdFromItem(mc.thePlayer.getCurrentEquippedItem().getItem()) == 346) {
+         GlStateManager.translate(0.08f, -0.027f, -0.33f);
+         GlStateManager.scale(0.93f, 1.0f, 1.0f);
+      }
+
+      if (Settings.OLD_BLOCKHIT && mc != null && mc.thePlayer != null && mc.thePlayer.isSwingInProgress && mc.thePlayer.getCurrentEquippedItem() !=
+              null && !mc.thePlayer.isEating() && !mc.thePlayer.isBlocking()) {
+         GlStateManager.scale(0.85f, 0.85f, 0.85f);
+         GlStateManager.translate(-0.078f, 0.003f, 0.05f);
+      }
+
+
       GlStateManager.translate(0.56F, -0.52F, -0.71999997F);
       GlStateManager.translate(0.0F, equipProgress * -0.6F, 0.0F);
       GlStateManager.rotate(45.0F, 0.0F, 1.0F, 0.0F);
-      float f = MathHelper.sin(swingProgress * swingProgress * 3.1415927F);
-      float f1 = MathHelper.sin(MathHelper.sqrt_float(swingProgress) * 3.1415927F);
+      float f = MathHelper.sin(swingProgress * swingProgress * (float) Math.PI);
+      float f1 = MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI);
       GlStateManager.rotate(f * -20.0F, 0.0F, 1.0F, 0.0F);
       GlStateManager.rotate(f1 * -20.0F, 0.0F, 0.0F, 1.0F);
       GlStateManager.rotate(f1 * -80.0F, 1.0F, 0.0F, 0.0F);
@@ -324,46 +345,67 @@
     * Renders the active item in the player's hand when in first person mode. Args: partialTickTime
     */
    public void renderItemInFirstPerson(float partialTicks) {
-      float f = 1.0F - (this.prevEquippedProgress + (this.equippedProgress - this.prevEquippedProgress) * partialTicks);
-      AbstractClientPlayer abstractclientplayer = this.mc.thePlayer;
-      float f1 = abstractclientplayer.getSwingProgress(partialTicks);
-      float f2 = abstractclientplayer.prevRotationPitch + (abstractclientplayer.rotationPitch - abstractclientplayer.prevRotationPitch) * partialTicks;
-      float f3 = abstractclientplayer.prevRotationYaw + (abstractclientplayer.rotationYaw - abstractclientplayer.prevRotationYaw) * partialTicks;
-      this.rotateArroundXAndY(f2, f3);
-      this.setLightMapFromPlayer(abstractclientplayer);
-      this.rotateWithPlayerRotations((EntityPlayerSP)abstractclientplayer, partialTicks);
+      float f = 1.0F - (prevEquippedProgress + (equippedProgress - prevEquippedProgress) * partialTicks);
+      EntityPlayerSP entityPlayerSP = mc.thePlayer;
+      float f1 = entityPlayerSP.getSwingProgress(partialTicks);
+      float f2 = entityPlayerSP.prevRotationPitch + (entityPlayerSP.rotationPitch - entityPlayerSP.prevRotationPitch) * partialTicks;
+      float f3 = entityPlayerSP.prevRotationYaw + (entityPlayerSP.rotationYaw - entityPlayerSP.prevRotationYaw) * partialTicks;
+      rotateArroundXAndY(f2, f3);
+      setLightMapFromPlayer(entityPlayerSP);
+      rotateWithPlayerRotations(entityPlayerSP, partialTicks);
       GlStateManager.enableRescaleNormal();
       GlStateManager.pushMatrix();
-      if(this.itemToRender != null) {
-         if(this.itemToRender.getItem() == Items.filled_map) {
-            this.renderItemMap(abstractclientplayer, f2, f, f1);
-         } else if(abstractclientplayer.getItemInUseCount() > 0) {
-            EnumAction enumaction = this.itemToRender.getItemUseAction();
-            switch(enumaction) {
-            case NONE:
-               this.transformFirstPersonItem(f, 0.0F);
-               break;
-            case EAT:
-            case DRINK:
-               this.performDrinking(abstractclientplayer, partialTicks);
-               this.transformFirstPersonItem(f, 0.0F);
-               break;
-            case BLOCK:
-               this.transformFirstPersonItem(f, 0.0F);
-               this.doBlockTransformations();
-               break;
-            case BOW:
-               this.transformFirstPersonItem(f, 0.0F);
-               this.doBowTransformations(partialTicks, abstractclientplayer);
+
+      if (itemToRender != null) {
+         if (itemToRender.getItem() == Items.filled_map) {
+            renderItemMap(entityPlayerSP, f2, f, f1);
+         } else if ((itemToRender.getItem() instanceof ItemSword) && !mc.thePlayer.isBlocking() && Settings.CUSTOM_SWORD_ANIMATION) {
+            transformFirstPersonItem(f, f1);
+         } else if (entityPlayerSP.getItemInUseCount() > 0) {
+            EnumAction enumaction = itemToRender.getItemUseAction();
+
+            switch (enumaction) {
+               case NONE:
+                  transformFirstPersonItem(f, 0.0F);
+                  break;
+               case EAT:
+               case DRINK:
+                  performDrinking(entityPlayerSP, partialTicks);
+                  if (Settings.OLD_EATING) {
+                     transformFirstPersonItem(f, f1);
+                  } else {
+                     transformFirstPersonItem(f, 0.0F);
+                  }
+                  break;
+               case BLOCK:
+                  if (Settings.OLD_BLOCKHIT) {
+                     transformFirstPersonItem(f, f1);
+                     doBlockTransformations();
+                     GlStateManager.scale(0.83f, 0.88f, 0.85f);
+                     GlStateManager.translate(-0.3f, 0.1f, 0.0f);
+                  } else {
+                     transformFirstPersonItem(f, 0f);
+                     doBlockTransformations();                  }
+                  break;
+
+               case BOW:
+                  if (Settings.OLD_BOW) {
+                     transformFirstPersonItem(f, f1);
+                     doBowTransformations(partialTicks, entityPlayerSP);
+                     GlStateManager.translate(0.0F, 0.1F, -0.15F);
+                  } else {
+                     transformFirstPersonItem(f, 0.0F);
+                     doBowTransformations(partialTicks, entityPlayerSP);
+                  }
             }
          } else {
-            this.doItemUsedTransformations(f1);
-            this.transformFirstPersonItem(f, f1);
+            doItemUsedTransformations(f1);
+            transformFirstPersonItem(f, f1);
          }
 
-         this.renderItem(abstractclientplayer, this.itemToRender, ItemCameraTransforms.TransformType.FIRST_PERSON);
-      } else if(!abstractclientplayer.isInvisible()) {
-         this.renderPlayerArm(abstractclientplayer, f, f1);
+         renderItem(entityPlayerSP, itemToRender, ItemCameraTransforms.TransformType.FIRST_PERSON);
+      } else if (!entityPlayerSP.isInvisible()) {
+         renderPlayerArm(entityPlayerSP, f, f1);
       }
 
       GlStateManager.popMatrix();
@@ -481,6 +523,8 @@
     * @param partialTicks Partial ticks
     */
    private void renderFireInFirstPerson(float partialTicks) {
+      GlStateManager.pushMatrix();
+      GlStateManager.translate(0, Settings.FIRE_HEIGHT, 0);
       Tessellator tessellator = Tessellator.getInstance();
       WorldRenderer worldrenderer = tessellator.getWorldRenderer();
       GlStateManager.color(1.0F, 1.0F, 1.0F, 0.9F);
@@ -518,6 +562,8 @@
       GlStateManager.disableBlend();
       GlStateManager.depthMask(true);
       GlStateManager.depthFunc(515);
+
+      GlStateManager.popMatrix();
    }
 
    public void updateEquippedItem() {
