--- original/net/minecraft/client/network/NetHandlerPlayClient.java
+++ changed/net/minecraft/client/network/NetHandlerPlayClient.java
@@ -1,6 +1,18 @@
 package net.minecraft.client.network;
 
+import cc.hyperium.Hyperium;
+import cc.hyperium.Metadata;
+import cc.hyperium.event.EventBus;
+import cc.hyperium.event.network.chat.ServerChatEvent;
+import cc.hyperium.handlers.handlers.chat.GeneralChatHandler;
+import cc.hyperium.hooks.NetHandlerPlayClientHook;
+import cc.hyperium.internal.addons.AddonBootstrap;
+import cc.hyperium.internal.addons.AddonManifest;
+import cc.hyperium.mods.timechanger.TimeChanger;
+import cc.hyperium.network.LoginReplyHandler;
+import com.google.common.base.Charsets;
 import com.google.common.collect.Maps;
+import com.google.common.collect.ObjectArrays;
 import com.google.common.util.concurrent.FutureCallback;
 import com.google.common.util.concurrent.Futures;
 import com.mojang.authlib.GameProfile;
@@ -271,7 +283,7 @@
         this.gameController.gameSettings.difficulty = packetIn.getDifficulty();
         this.gameController.loadWorld(this.clientWorldController);
         this.gameController.thePlayer.dimension = packetIn.getDimension();
-        this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
+        this.gameController.displayGuiScreen(null);
         this.gameController.thePlayer.setEntityId(packetIn.getEntityId());
         this.currentServerMaxPlayers = packetIn.getMaxPlayers();
         this.gameController.thePlayer.setReducedDebug(packetIn.isReducedDebugInfo());
@@ -726,10 +738,19 @@
     public void handleChat(S02PacketChat packetIn) {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
 
+        ServerChatEvent event = new ServerChatEvent(packetIn.getType(), packetIn.getChatComponent());
+
+        EventBus.INSTANCE.post(event);
+
+        // If the event is cancelled or the message is empty, we'll ignore the packet.
+
+        if (event.isCancelled() || event.getChat().getFormattedText().isEmpty()) return;
+
         if (packetIn.getType() == 2) {
-            this.gameController.ingameGUI.setRecordPlaying(packetIn.getChatComponent(), false);
+            gameController.ingameGUI.setRecordPlaying(event.getChat(), false);
         } else {
-            this.gameController.ingameGUI.getChatGUI().printChatMessage(packetIn.getChatComponent());
+            // This will then trigger the other chat event
+            gameController.ingameGUI.getChatGUI().printChatMessage(event.getChat());
         }
     }
 
@@ -739,6 +760,10 @@
      */
     public void handleAnimation(S0BPacketAnimation packetIn) {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
+
+        // Stops the code if the world is null, usually due to a weird packet from the server
+
+        if (clientWorldController == null) return;
         Entity entity = this.clientWorldController.getEntityByID(packetIn.getEntityID());
 
         if (entity != null) {
@@ -805,12 +830,39 @@
         }
     }
 
+    private TimeChanger timeChanger = Hyperium.INSTANCE.getModIntegration().getTimeChanger();
+
     public void handleTimeUpdate(S03PacketTimeUpdate packetIn) {
-        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
-        this.gameController.theWorld.setTotalWorldTime(packetIn.getTotalWorldTime());
-        this.gameController.theWorld.setWorldTime(packetIn.getWorldTime());
+        if (timeChanger == null) timeChanger = Hyperium.INSTANCE.getModIntegration().getTimeChanger();
+
+        if (timeChanger.getTimeType() == null) {
+            handleActualPacket(packetIn);
+            return;
+        }
+
+        switch (timeChanger.getTimeType()) {
+            case DAY:
+                handleActualPacket(new S03PacketTimeUpdate(packetIn.getWorldTime(), -6000L, true));
+                break;
+            case SUNSET:
+                handleActualPacket(new S03PacketTimeUpdate(packetIn.getWorldTime(), -22880L, true));
+                break;
+            case NIGHT:
+                handleActualPacket(new S03PacketTimeUpdate(packetIn.getWorldTime(), -18000L, true));
+                break;
+            case VANILLA:
+                handleActualPacket(packetIn);
+                break;
+        }
     }
 
+    private void handleActualPacket(S03PacketTimeUpdate packetIn) {
+        if (gameController == null || gameController.theWorld == null) return;
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, gameController);
+        gameController.theWorld.setTotalWorldTime(packetIn.getTotalWorldTime());
+        gameController.theWorld.setWorldTime(packetIn.getWorldTime());
+    }
+
     public void handleSpawnPosition(S05PacketSpawnPosition packetIn) {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
         this.gameController.thePlayer.setSpawnPoint(packetIn.getSpawnPos(), true);
@@ -897,7 +949,7 @@
             this.clientWorldController.setWorldScoreboard(scoreboard);
             this.gameController.loadWorld(this.clientWorldController);
             this.gameController.thePlayer.dimension = packetIn.getDimensionID();
-            this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
+            this.gameController.displayGuiScreen(null);
         }
 
         this.gameController.setDimensionAndSpawnPlayer(packetIn.getDimensionID());
@@ -1396,16 +1448,27 @@
 
         if (this.gameController.currentScreen instanceof GuiChat) {
             GuiChat guichat = (GuiChat)this.gameController.currentScreen;
-            guichat.onAutocompleteResponse(astring);
+            guichat.onAutocompleteResponse(addHyperiumCompletions(astring));
         }
     }
 
+    private String[] addHyperiumCompletions(String[] currentCompletions) {
+        String[] modCompletions = Hyperium.INSTANCE.getHandlers().getHyperiumCommandHandler().getLatestAutoComplete();
+
+        if (modCompletions != null) currentCompletions = ObjectArrays.concat(modCompletions, currentCompletions, String.class);
+        return currentCompletions;
+    }
+
     public void handleSoundEffect(S29PacketSoundEffect packetIn) {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
         this.gameController.theWorld.playSound(packetIn.getX(), packetIn.getY(), packetIn.getZ(), packetIn.getSoundName(), packetIn.getVolume(), packetIn.getPitch(), false);
     }
 
     public void handleResourcePack(S48PacketResourcePackSend packetIn) {
+        if (!NetHandlerPlayClientHook.validateResourcePackUrl(this, packetIn.getURL(), packetIn.getHash())) {
+            return;
+        }
+
         final String s = packetIn.getURL();
         final String s1 = packetIn.getHash();
 
@@ -1526,6 +1589,7 @@
                 this.gameController.displayGuiScreen(new GuiScreenBook(this.gameController.thePlayer, itemstack, false));
             }
         }
+        NetHandlerPlayClientHook.readAddonData(this, packetIn);
     }
 
     /**
