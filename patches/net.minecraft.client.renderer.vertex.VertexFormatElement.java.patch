--- original/net/minecraft/client/renderer/vertex/VertexFormatElement.java
+++ changed/net/minecraft/client/renderer/vertex/VertexFormatElement.java
@@ -1,10 +1,15 @@
 package net.minecraft.client.renderer.vertex;
 
+import net.minecraft.client.renderer.GlStateManager;
+import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.lwjgl.opengl.GL11;
 
+import java.nio.ByteBuffer;
+
 @SideOnly(Side.CLIENT)
 public class VertexFormatElement {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -129,5 +134,76 @@
         public String getDisplayName() {
             return this.displayName;
         }
+
+        public void preDraw(VertexFormat format, int element, int stride, ByteBuffer buffer) {
+            VertexFormatElement attr = format.getElement(element);
+            int count = attr.getElementCount();
+            int constant = attr.getType().getGlConstant();
+            buffer.position(format.getOffset(element));
+
+            switch (this) {
+            case POSITION:
+                GL11.glVertexPointer(count, constant, stride, buffer);
+                GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
+                break;
+
+            case NORMAL:
+
+                if (count != 3) throw new IllegalArgumentException("Normal attribute should have the size 3: " + attr);
+                GL11.glNormalPointer(constant, stride, buffer);
+                GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
+                break;
+
+            case COLOR:
+                GL11.glColorPointer(count, constant, stride, buffer);
+                GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
+                break;
+
+            case UV:
+                OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + attr.getIndex());
+                GL11.glTexCoordPointer(count, constant, stride, buffer);
+                GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
+                OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
+                break;
+
+            case PADDING:
+                break;
+
+            default:
+                VertexFormatElement.LOGGER.error("Unimplemented vanilla attribute upload: {}", displayName);
+                break;
+            }
+        }
+
+        public void postDraw(VertexFormat format, int element, int stride, ByteBuffer buffer) {
+            VertexFormatElement attr = format.getElement(element);
+            switch (this) {
+            case POSITION:
+                GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
+                break;
+
+            case NORMAL:
+                GL11.glDisableClientState(GL11.GL_NORMAL_ARRAY);
+                break;
+
+            case COLOR:
+                GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
+                GlStateManager.resetColor();
+                break;
+
+            case UV:
+                OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + attr.getIndex());
+                GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
+                OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
+                break;
+
+            case PADDING:
+                break;
+
+            default:
+                VertexFormatElement.LOGGER.error("Unimplemented vanilla attribute upload: {}", displayName);
+                break;
+            }
+        }
     }
 }
