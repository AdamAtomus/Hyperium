--- original/net/minecraft/client/renderer/EntityRenderer.java
+++ changed/net/minecraft/client/renderer/EntityRenderer.java
@@ -1,5 +1,12 @@
 package net.minecraft.client.renderer;
 
+import cc.hyperium.Hyperium;
+import cc.hyperium.event.EventBus;
+import cc.hyperium.event.render.DrawBlockHighlightEvent;
+import cc.hyperium.event.render.RenderEvent;
+import cc.hyperium.event.render.RenderWorldEvent;
+import cc.hyperium.handlers.handlers.reach.ReachDisplay;
+import cc.hyperium.mods.common.PerspectiveModifierHandler;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.gson.JsonSyntaxException;
@@ -223,6 +230,8 @@
       }
    }
 
+   public boolean isUsingShader;
+
    public void activateNextShader() {
       if(OpenGlHelper.shadersSupported) {
          if(this.mc.getRenderViewEntity() instanceof EntityPlayer) {
@@ -232,6 +241,7 @@
 
             this.shaderIndex = (this.shaderIndex + 1) % (shaderResourceLocations.length + 1);
             if(this.shaderIndex != shaderCount) {
+               isUsingShader = true;
                this.loadShader(shaderResourceLocations[this.shaderIndex]);
             } else {
                this.theShaderGroup = null;
@@ -241,7 +251,7 @@
       }
    }
 
-   private void loadShader(ResourceLocation resourceLocationIn) {
+   public void loadShader(ResourceLocation resourceLocationIn) {
       try {
          this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
          this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
@@ -342,86 +352,80 @@
     * Finds what block or object the mouse is over at the specified partial tick time. Args: partialTickTime
     */
    public void getMouseOver(float partialTicks) {
-      Entity entity = this.mc.getRenderViewEntity();
-      if(entity != null) {
-         if(this.mc.theWorld != null) {
-            this.mc.mcProfiler.startSection("pick");
-            this.mc.pointedEntity = null;
-            double d0 = (double)this.mc.playerController.getBlockReachDistance();
-            this.mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
-            double d1 = d0;
-            Vec3 vec3 = entity.getPositionEyes(partialTicks);
-            boolean flag = false;
-            int i = 3;
-            if(this.mc.playerController.extendedReach()) {
-               d0 = 6.0D;
-               d1 = 6.0D;
-            } else {
-               if(d0 > 3.0D) {
-                  flag = true;
-               }
+      Entity entity = mc.getRenderViewEntity();
+      if (entity != null && mc.theWorld != null) {
+         mc.mcProfiler.startSection("pick");
+         mc.pointedEntity = null;
+         double d0 = mc.playerController.getBlockReachDistance();
+         mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
+         double d1 = d0;
+         Vec3 vec3 = entity.getPositionEyes(partialTicks);
+         boolean flag = false;
 
-//               d0 = d0;
-            }
+         if (mc.playerController.extendedReach()) {
+            d0 = 6.0D;
+            d1 = 6.0D;
+         } else if (d0 > 3.0D) {
+            flag = true;
+         }
 
-            if(this.mc.objectMouseOver != null) {
-               d1 = this.mc.objectMouseOver.hitVec.distanceTo(vec3);
-            }
+         if (mc.objectMouseOver != null) d1 = mc.objectMouseOver.hitVec.distanceTo(vec3);
 
-            Vec3 vec31 = entity.getLook(partialTicks);
-            Vec3 vec32 = vec3.addVector(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0);
-            this.pointedEntity = null;
-            Vec3 vec33 = null;
-            float f = 1.0F;
-            List<Entity> list = this.mc.theWorld.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0).expand((double)f, (double)f, (double)f), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>() {
-               public boolean apply(Entity p_apply_1_) {
-                  return p_apply_1_.canBeCollidedWith();
+         Vec3 vec31 = entity.getLook(partialTicks);
+         Vec3 vec32 = vec3.addVector(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0);
+         pointedEntity = null;
+         Vec3 vec33 = null;
+         float f = 1.0F;
+         List<Entity> list = mc.theWorld.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec31.xCoord * d0,
+                 vec31.yCoord * d0, vec31.zCoord * d0).expand(f, f, f), Predicates.and(EntitySelectors.NOT_SPECTATING, Entity::canBeCollidedWith));
+         double d2 = d1;
+
+         for (Entity entity1 : list) {
+            float f1 = entity1.getCollisionBorderSize();
+            AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand(f1, f1, f1);
+            MovingObjectPosition movingobjectposition = axisalignedbb.calculateIntercept(vec3, vec32);
+
+            if (axisalignedbb.isVecInside(vec3)) {
+               if (d2 >= 0.0D) {
+                  pointedEntity = entity1;
+                  vec33 = movingobjectposition == null ? vec3 : movingobjectposition.hitVec;
+                  d2 = 0.0D;
                }
-            }));
-            double d2 = d1;
+            } else if (movingobjectposition != null) {
+               double d3 = vec3.distanceTo(movingobjectposition.hitVec);
 
-            for(int j = 0; j < list.size(); ++j) {
-               Entity entity1 = (Entity)list.get(j);
-               float f1 = entity1.getCollisionBorderSize();
-               AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand((double)f1, (double)f1, (double)f1);
-               MovingObjectPosition movingobjectposition = axisalignedbb.calculateIntercept(vec3, vec32);
-               if(axisalignedbb.isVecInside(vec3)) {
-                  if(d2 >= 0.0D) {
-                     this.pointedEntity = entity1;
-                     vec33 = movingobjectposition == null?vec3:movingobjectposition.hitVec;
-                     d2 = 0.0D;
-                  }
-               } else if(movingobjectposition != null) {
-                  double d3 = vec3.distanceTo(movingobjectposition.hitVec);
-                  if(d3 < d2 || d2 == 0.0D) {
-                     if(entity1 == entity.ridingEntity) {
-                        if(d2 == 0.0D) {
-                           this.pointedEntity = entity1;
-                           vec33 = movingobjectposition.hitVec;
-                        }
-                     } else {
-                        this.pointedEntity = entity1;
+               if (d3 < d2 || d2 == 0.0D) {
+                  if (entity1 == entity.ridingEntity) {
+                     if (d2 == 0.0D) {
+                        pointedEntity = entity1;
                         vec33 = movingobjectposition.hitVec;
-                        d2 = d3;
                      }
+                  } else {
+                     pointedEntity = entity1;
+                     vec33 = movingobjectposition.hitVec;
+                     d2 = d3;
                   }
                }
             }
+         }
+         double v = 0;
 
-            if(this.pointedEntity != null && flag && vec3.distanceTo(vec33) > 3.0D) {
-               this.pointedEntity = null;
-               this.mc.objectMouseOver = new MovingObjectPosition(MovingObjectPosition.MovingObjectType.MISS, vec33, (EnumFacing)null, new BlockPos(vec33));
-            }
+         if (pointedEntity != null && flag && (v = vec3.distanceTo(vec33)) > 3.0D) {
+            pointedEntity = null;
+            mc.objectMouseOver = new MovingObjectPosition(MovingObjectPosition.MovingObjectType.MISS, vec33, null, new BlockPos(vec33));
+         }
 
-            if(this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null)) {
-               this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity, vec33);
-               if(this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame) {
-                  this.mc.pointedEntity = this.pointedEntity;
-               }
-            }
+         if (v != 0 || pointedEntity != null) ReachDisplay.dis = v;
 
-            this.mc.mcProfiler.endSection();
+         if (pointedEntity != null && (d2 < d1 || mc.objectMouseOver == null)) {
+            mc.objectMouseOver = new MovingObjectPosition(pointedEntity, vec33);
+
+            if (pointedEntity instanceof EntityLivingBase || pointedEntity instanceof EntityItemFrame) {
+               mc.pointedEntity = pointedEntity;
+            }
          }
+
+         mc.mcProfiler.endSection();
       }
    }
 
@@ -521,86 +525,108 @@
     * sets up player's eye (or camera in third person mode)
     */
    private void orientCamera(float partialTicks) {
-      Entity entity = this.mc.getRenderViewEntity();
+      PerspectiveModifierHandler perspectiveHandler = Hyperium.INSTANCE.getHandlers().getPerspectiveHandler();
+      Entity entity = mc.getRenderViewEntity();
       float f = entity.getEyeHeight();
-      double d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)partialTicks;
-      double d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)partialTicks + (double)f;
-      double d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)partialTicks;
-      if(entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPlayerSleeping()) {
-         f = (float)((double)f + 1.0D);
-         GlStateManager.translate(0.0F, 0.3F, 0.0F);
-         if(!this.mc.gameSettings.debugCamEnable) {
-            BlockPos blockpos = new BlockPos(entity);
-            IBlockState iblockstate = this.mc.theWorld.getBlockState(blockpos);
+      double d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * partialTicks;
+      double d2 = entity.prevPosY + (entity.posY - entity.prevPosY) * partialTicks + f;
+
+      double d3 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * partialTicks;
+
+      if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPlayerSleeping()) {
+         ++f;
+         GlStateManager.translate(0.0f, 0.3f, 0.0f);
+         if (!mc.gameSettings.debugCamEnable) {
+            final BlockPos blockpos = new BlockPos(entity);
+            final IBlockState iblockstate = mc.theWorld.getBlockState(blockpos);
             Block block = iblockstate.getBlock();
-            if(block == Blocks.bed) {
-               int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
-               GlStateManager.rotate((float)(j * 90), 0.0F, 1.0F, 0.0F);
-            }
 
-            GlStateManager.rotate(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F, 0.0F, -1.0F, 0.0F);
-            GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, -1.0F, 0.0F, 0.0F);
+            if (block == Blocks.bed) {
+               int j = iblockstate.getValue(BlockBed.FACING).getHorizontalIndex();
+               GlStateManager.rotate((float) (j * 90), 0.0F, 1.0F, 0.0F);
+            }
+            GlStateManager.rotate(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0f, 0.0f, -1.0f, 0.0f);
+            GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, -1.0f, 0.0f, 0.0f);
          }
-      } else if(this.mc.gameSettings.thirdPersonView > 0) {
-         double d3 = (double)(this.thirdPersonDistanceTemp + (this.thirdPersonDistance - this.thirdPersonDistanceTemp) * partialTicks);
-         if(this.mc.gameSettings.debugCamEnable) {
-            GlStateManager.translate(0.0F, 0.0F, (float)(-d3));
+      } else if (mc.gameSettings.thirdPersonView > 0) {
+         double d4 = thirdPersonDistanceTemp + (thirdPersonDistance - thirdPersonDistanceTemp) * partialTicks;
+         if (mc.gameSettings.debugCamEnable) {
+            GlStateManager.translate(0.0f, 0.0f, (float) (-d4));
          } else {
-            float f1 = entity.rotationYaw;
-            float f2 = entity.rotationPitch;
-            if(this.mc.gameSettings.thirdPersonView == 2) {
-               f2 += 180.0F;
+            float f2 = entity.rotationYaw;
+            float f3 = entity.rotationPitch;
+            if (perspectiveHandler.enabled) {
+               f2 = perspectiveHandler.modifiedYaw;
+               f3 = perspectiveHandler.modifiedPitch;
             }
-
-            double d4 = (double)(-MathHelper.sin(f1 / 180.0F * 3.1415927F) * MathHelper.cos(f2 / 180.0F * 3.1415927F)) * d3;
-            double d5 = (double)(MathHelper.cos(f1 / 180.0F * 3.1415927F) * MathHelper.cos(f2 / 180.0F * 3.1415927F)) * d3;
-            double d6 = (double)(-MathHelper.sin(f2 / 180.0F * 3.1415927F)) * d3;
-
-            for(int i = 0; i < 8; ++i) {
-               float f3 = (float)((i & 1) * 2 - 1);
-               float f4 = (float)((i >> 1 & 1) * 2 - 1);
-               float f5 = (float)((i >> 2 & 1) * 2 - 1);
-               f3 = f3 * 0.1F;
-               f4 = f4 * 0.1F;
-               f5 = f5 * 0.1F;
-               MovingObjectPosition movingobjectposition = this.mc.theWorld.rayTraceBlocks(new Vec3(d0 + (double)f3, d1 + (double)f4, d2 + (double)f5), new Vec3(d0 - d4 + (double)f3 + (double)f5, d1 - d6 + (double)f4, d2 - d5 + (double)f5));
-               if(movingobjectposition != null) {
-                  double d7 = movingobjectposition.hitVec.distanceTo(new Vec3(d0, d1, d2));
-                  if(d7 < d3) {
-                     d3 = d7;
+            if (mc.gameSettings.thirdPersonView == 2) {
+               f3 += 180.0f;
+            }
+            final double d5 = -MathHelper.sin(f2 / 180.0f * 3.1415927f) * MathHelper.cos(f3 / 180.0f * 3.1415927f) * d4;
+            final double d6 = MathHelper.cos(f2 / 180.0f * 3.1415927f) * MathHelper.cos(f3 / 180.0f * 3.1415927f) * d4;
+            final double d7 = -MathHelper.sin(f3 / 180.0f * 3.1415927f) * d4;
+            for (int i = 0; i < 8; ++i) {
+               float f4 = (i & 0x1) * 2 - 1;
+               float f5 = (i >> 1 & 0x1) * 2 - 1;
+               float f6 = (i >> 2 & 0x1) * 2 - 1;
+               f4 *= 0.1f;
+               f5 *= 0.1f;
+               f6 *= 0.1f;
+               final MovingObjectPosition movingobjectposition = mc.theWorld.rayTraceBlocks(new Vec3(d0 + f4, d2 + f5, d3 + f6), new Vec3(d0 - d5 + f4 + f6, d2 - d7 + f5, d3 - d6 + f6));
+               if (movingobjectposition != null) {
+                  final double d8 = movingobjectposition.hitVec.distanceTo(new Vec3(d0, d2, d3));
+                  if (d8 < d4) {
+                     d4 = d8;
                   }
                }
             }
-
-            if(this.mc.gameSettings.thirdPersonView == 2) {
-               GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
+            if (mc.gameSettings.thirdPersonView == 2) {
+               GlStateManager.rotate(180.0f, 0.0f, 1.0f, 0.0f);
             }
 
-            GlStateManager.rotate(entity.rotationPitch - f2, 1.0F, 0.0F, 0.0F);
-            GlStateManager.rotate(entity.rotationYaw - f1, 0.0F, 1.0F, 0.0F);
-            GlStateManager.translate(0.0F, 0.0F, (float)(-d3));
-            GlStateManager.rotate(f1 - entity.rotationYaw, 0.0F, 1.0F, 0.0F);
-            GlStateManager.rotate(f2 - entity.rotationPitch, 1.0F, 0.0F, 0.0F);
+            if (perspectiveHandler.enabled) {
+               GlStateManager.rotate(perspectiveHandler.modifiedPitch - f3, 1.0f, 0.0f, 0.0f);
+               GlStateManager.rotate(perspectiveHandler.modifiedYaw - f2, 0.0f, 1.0f, 0.0f);
+               GlStateManager.translate(0.0f, 0.0f, (float) (-d4));
+               GlStateManager.rotate(f2 - perspectiveHandler.modifiedYaw, 0.0f, 1.0f, 0.0f);
+               GlStateManager.rotate(f3 - perspectiveHandler.modifiedPitch, 1.0f, 0.0f, 0.0f);
+            } else {
+               GlStateManager.rotate(entity.rotationPitch - f3, 1.0f, 0.0f, 0.0f);
+               GlStateManager.rotate(entity.rotationYaw - f2, 0.0f, 1.0f, 0.0f);
+               GlStateManager.translate(0.0f, 0.0f, (float) (-d4));
+               GlStateManager.rotate(f2 - entity.rotationYaw, 0.0f, 1.0f, 0.0f);
+               GlStateManager.rotate(f3 - entity.rotationPitch, 1.0f, 0.0f, 0.0f);
+            }
          }
       } else {
-         GlStateManager.translate(0.0F, 0.0F, -0.1F);
+         GlStateManager.translate(0.0f, 0.0f, -0.1f);
       }
 
-      if(!this.mc.gameSettings.debugCamEnable) {
-         GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, 1.0F, 0.0F, 0.0F);
-         if(entity instanceof EntityAnimal) {
-            EntityAnimal entityanimal = (EntityAnimal)entity;
-            GlStateManager.rotate(entityanimal.prevRotationYawHead + (entityanimal.rotationYawHead - entityanimal.prevRotationYawHead) * partialTicks + 180.0F, 0.0F, 1.0F, 0.0F);
+      if (!mc.gameSettings.debugCamEnable) {
+         float yaw = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0f;
+         final float pitch = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
+         final float roll = 0.0f;
+         if (entity instanceof EntityAnimal) {
+            final EntityAnimal entityanimal = (EntityAnimal) entity;
+            yaw = entityanimal.prevRotationYawHead + (entityanimal.rotationYawHead - entityanimal.prevRotationYawHead) * partialTicks + 180.0f;
+         }
+
+         if (perspectiveHandler.enabled) {
+            GlStateManager.rotate(roll, 0.0f, 0.0f, 1.0f);
+            GlStateManager.rotate(perspectiveHandler.modifiedPitch, 1.0f, 0.0f, 0.0f);
+            GlStateManager.rotate(perspectiveHandler.modifiedYaw + 180.0f, 0.0f, 1.0f, 0.0f);
          } else {
-            GlStateManager.rotate(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F, 0.0F, 1.0F, 0.0F);
+            GlStateManager.rotate(roll, 0.0f, 0.0f, 1.0f);
+            GlStateManager.rotate(pitch, 1.0f, 0.0f, 0.0f);
+            GlStateManager.rotate(yaw, 0.0f, 1.0f, 0.0f);
          }
       }
 
-      GlStateManager.translate(0.0F, -f, 0.0F);
-      d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)partialTicks;
-      d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)partialTicks + (double)f;
-      d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)partialTicks;
-      this.cloudFog = this.mc.renderGlobal.hasCloudFog(d0, d1, d2, partialTicks);
+      GlStateManager.translate(0.0f, -f, 0.0f);
+      d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * partialTicks;
+      d2 = entity.prevPosY + (entity.posY - entity.prevPosY) * partialTicks + f;
+      d3 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * partialTicks;
+      cloudFog = mc.renderGlobal.hasCloudFog(d0, d2, d3, partialTicks);
    }
 
    /**
@@ -879,6 +905,40 @@
          this.prevFrameTime = Minecraft.getSystemTime();
       }
 
+      if (Hyperium.INSTANCE.getHandlers() == null || Hyperium.INSTANCE.getHandlers().getPerspectiveHandler() == null) {
+         return;
+      }
+
+      PerspectiveModifierHandler perspectiveHandler = Hyperium.INSTANCE.getHandlers().getPerspectiveHandler();
+      boolean flag2 = Display.isActive();
+      if (Minecraft.getMinecraft().inGameHasFocus && flag2) {
+         if (perspectiveHandler.enabled && Minecraft.getMinecraft().gameSettings.thirdPersonView != 1) {
+            perspectiveHandler.onDisable();
+         }
+
+         if (perspectiveHandler.enabled) {
+            Minecraft.getMinecraft().mouseHelper.mouseXYChange();
+
+            float f = Minecraft.getMinecraft().gameSettings.mouseSensitivity * 0.6F + 0.2F;
+            float f1 = f * f * f * 8.0F;
+            float f2 = (float) Minecraft.getMinecraft().mouseHelper.deltaX * f1;
+            float f3 = (float) Minecraft.getMinecraft().mouseHelper.deltaY * f1;
+
+            // Modifying pitch and yaw values.
+            perspectiveHandler.modifiedYaw += f2 / 8.0F;
+            perspectiveHandler.modifiedPitch += f3 / 8.0F;
+
+            // Checking if pitch exceeds maximum range.
+            if (Math.abs(perspectiveHandler.modifiedPitch) > 90.0F) {
+               if (perspectiveHandler.modifiedPitch > 0.0F) {
+                  perspectiveHandler.modifiedPitch = 90.0F;
+               } else {
+                  perspectiveHandler.modifiedPitch = -90.0F;
+               }
+            }
+         }
+      }
+
       this.mc.mcProfiler.startSection("mouse");
       if(flag && Minecraft.isRunningOnMac && this.mc.inGameHasFocus && !Mouse.isInsideWindow()) {
          Mouse.setGrabbed(false);
@@ -943,6 +1003,7 @@
 
             this.renderEndNanoTime = System.nanoTime();
             this.mc.mcProfiler.endStartSection("gui");
+            EventBus.INSTANCE.post(new RenderEvent());
             if(!this.mc.gameSettings.hideGUI || this.mc.currentScreen != null) {
                GlStateManager.alphaFunc(516, 0.1F);
                this.mc.ingameGUI.renderGameOverlay(partialTicks);
@@ -1146,6 +1207,13 @@
          if(this.mc.objectMouseOver != null && entity.isInsideOfMaterial(Material.water) && flag) {
             EntityPlayer entityplayer = (EntityPlayer)entity;
             GlStateManager.disableAlpha();
+
+            DrawBlockHighlightEvent drawBlockHighlightEvent = new DrawBlockHighlightEvent(((EntityPlayer) mc.getRenderViewEntity()), mc.objectMouseOver, partialTicks);
+            EventBus.INSTANCE.post(drawBlockHighlightEvent);
+            if (drawBlockHighlightEvent.isCancelled()) {
+               Hyperium.INSTANCE.getHandlers().getConfigOptions().isCancelBox = true;
+            }
+
             this.mc.mcProfiler.endStartSection("outline");
             renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
             GlStateManager.enableAlpha();
@@ -1207,6 +1275,10 @@
          this.renderCloudsCheck(renderglobal, partialTicks, pass);
       }
 
+      mc.mcProfiler.startSection("hyperium_render_last");
+      new RenderWorldEvent(mc.renderGlobal, partialTicks).post();
+      mc.mcProfiler.endSection();
+
       this.mc.mcProfiler.endStartSection("hand");
       if(this.renderHand) {
          GlStateManager.clear(256);
