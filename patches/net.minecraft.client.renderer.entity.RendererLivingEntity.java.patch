--- original/net/minecraft/client/renderer/entity/RendererLivingEntity.java
+++ changed/net/minecraft/client/renderer/entity/RendererLivingEntity.java
@@ -1,5 +1,10 @@
 package net.minecraft.client.renderer.entity;
 
+import cc.hyperium.Hyperium;
+import cc.hyperium.config.Settings;
+import cc.hyperium.event.EventBus;
+import cc.hyperium.event.render.EntityRenderEvent;
+import cc.hyperium.utils.Utils;
 import com.google.common.collect.Lists;
 import java.nio.FloatBuffer;
 import java.util.List;
@@ -12,12 +17,14 @@
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.WorldRenderer;
+import net.minecraft.client.renderer.culling.ICamera;
 import net.minecraft.client.renderer.entity.Render;
 import net.minecraft.client.renderer.entity.RenderManager;
 import net.minecraft.client.renderer.entity.layers.LayerRenderer;
 import net.minecraft.client.renderer.texture.DynamicTexture;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.entity.EntityLivingBase;
+import net.minecraft.entity.item.EntityArmorStand;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EnumPlayerModelParts;
 import net.minecraft.scoreboard.ScorePlayerTeam;
@@ -45,7 +52,7 @@
       this.shadowSize = shadowSizeIn;
    }
 
-   protected <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean addLayer(U layer) {
+   public <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean addLayer(U layer) {
       return this.layerRenderers.add((LayerRenderer<T>)layer);
    }
 
@@ -82,6 +89,15 @@
     * Renders the desired {@code T} type Entity.
     */
    public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks) {
+      if (Settings.DISABLE_ARMORSTANDS && entity instanceof EntityArmorStand) ci.cancel();
+
+      final EntityRenderEvent event = new EntityRenderEvent(entity, (float) x, (float) y, (float) z, entity.rotationPitch, entityYaw, 1.0F);
+      EventBus.INSTANCE.post(event);
+
+      if (event.isCancelled()) {
+         return;
+      }
+
       GlStateManager.pushMatrix();
       GlStateManager.disableCull();
       this.mainModel.swingProgress = this.getSwingProgress(entity, partialTicks);
@@ -109,6 +125,8 @@
             if(f3 * f3 > 2500.0F) {
                f += f3 * 0.2F;
             }
+
+            f2 = f1 - f;
          }
 
          float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
@@ -354,22 +372,17 @@
       GlStateManager.translate((float)x, (float)y, (float)z);
    }
 
-   protected void rotateCorpse(T bat, float p_77043_2_, float p_77043_3_, float partialTicks) {
-      GlStateManager.rotate(180.0F - p_77043_3_, 0.0F, 1.0F, 0.0F);
-      if(bat.deathTime > 0) {
-         float f = ((float)bat.deathTime + partialTicks - 1.0F) / 20.0F * 1.6F;
+   protected void rotateCorpse(T bat, float p_77043_2_, float rotation, float partialTicks) {
+      GlStateManager.rotate(180.0F - rotation, 0.0F, 1.0F, 0.0F);
+
+      if (bat.deathTime > 0) {
+         float f = ((float) bat.deathTime + partialTicks - 1.0F) / 20.0F * 1.6F;
          f = MathHelper.sqrt_float(f);
-         if(f > 1.0F) {
-            f = 1.0F;
-         }
+         if (f > 1.0F) f = 1.0F;
 
-         GlStateManager.rotate(f * this.getDeathMaxRotation(bat), 0.0F, 0.0F, 1.0F);
+         GlStateManager.rotate(f * getDeathMaxRotation(bat), 0.0F, 0.0F, 1.0F);
       } else {
-         String s = EnumChatFormatting.getTextWithoutFormattingCodes(bat.getName());
-         if(s != null && (s.equals("Dinnerbone") || s.equals("Grumm")) && (!(bat instanceof EntityPlayer) || ((EntityPlayer)bat).isWearing(EnumPlayerModelParts.CAPE))) {
-            GlStateManager.translate(0.0F, bat.height + 0.1F, 0.0F);
-            GlStateManager.rotate(180.0F, 0.0F, 0.0F, 1.0F);
-         }
+         Hyperium.INSTANCE.getHandlers().getFlipHandler().transform(bat);
       }
 
    }
@@ -388,15 +401,14 @@
       return (float)livingBase.ticksExisted + partialTicks;
    }
 
-   protected void renderLayers(T entitylivingbaseIn, float p_177093_2_, float p_177093_3_, float partialTicks, float p_177093_5_, float p_177093_6_, float p_177093_7_, float p_177093_8_) {
-      for(LayerRenderer<T> layerrenderer : this.layerRenderers) {
-         boolean flag = this.setBrightness(entitylivingbaseIn, partialTicks, layerrenderer.shouldCombineTextures());
-         layerrenderer.doRenderLayer(entitylivingbaseIn, p_177093_2_, p_177093_3_, partialTicks, p_177093_5_, p_177093_6_, p_177093_7_, p_177093_8_);
-         if(flag) {
-            this.unsetBrightness();
-         }
+   protected void renderLayers(T entitylivingbaseIn, float limbSwing, float limbSwingAmount, float partialTicks, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
+      for (LayerRenderer<T> layerrenderer : layerRenderers) {
+         boolean f = layerrenderer.shouldCombineTextures();
+         if (Settings.OLD_ARMOUR) f = true;
+         boolean flag = setBrightness(entitylivingbaseIn, partialTicks, f);
+         layerrenderer.doRenderLayer(entitylivingbaseIn, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
+         if (flag) unsetBrightness();
       }
-
    }
 
    protected float getDeathMaxRotation(T entityLivingBaseIn) {
@@ -418,35 +430,38 @@
    }
 
    public void renderName(T entity, double x, double y, double z) {
-      if(this.canRenderName(entity)) {
-         double d0 = entity.getDistanceSqToEntity(this.renderManager.livingPlayer);
-         float f = entity.isSneaking()?32.0F:64.0F;
-         if(d0 < (double)(f * f)) {
+      if (canRenderName(entity)) {
+
+         double d0 = entity.getDistanceSqToEntity(renderManager.livingPlayer);
+         float f = entity.isSneaking() ? 32.0F : 64.0F;
+
+         if (d0 < (double) (f * f)) {
             String s = entity.getDisplayName().getFormattedText();
-            float f1 = 0.02666667F;
-            GlStateManager.alphaFunc(516, 0.1F);
-            if(entity.isSneaking()) {
-               FontRenderer fontrenderer = this.getFontRendererFromRenderManager();
+            GlStateManager.alphaFunc(GL11.GL_GREATER, 0.1F);
+
+            if (entity.isSneaking() && (Settings.SHOW_OWN_NAME || !entity.equals(Minecraft.getMinecraft().thePlayer))) {
+               FontRenderer fontrenderer = renderManager.getFontRenderer();
                GlStateManager.pushMatrix();
-               GlStateManager.translate((float)x, (float)y + entity.height + 0.5F - (entity.isChild()?entity.height / 2.0F:0.0F), (float)z);
+               float offset = Utils.INSTANCE.calculateDeadmauEarsOffset(entity);
+               GlStateManager.translate((float) x, (float) y + offset + entity.height + 0.5F - (entity.isChild() ? entity.height / 2.0F : 0.0F), (float) z);
                GL11.glNormal3f(0.0F, 1.0F, 0.0F);
-               GlStateManager.rotate(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-               GlStateManager.rotate(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+               GlStateManager.rotate(-renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
+               GlStateManager.rotate(renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
                GlStateManager.scale(-0.02666667F, -0.02666667F, 0.02666667F);
                GlStateManager.translate(0.0F, 9.374999F, 0.0F);
                GlStateManager.disableLighting();
                GlStateManager.depthMask(false);
                GlStateManager.enableBlend();
                GlStateManager.disableTexture2D();
-               GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
+               GlStateManager.tryBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, GL11.GL_ONE, GL11.GL_ZERO);
                int i = fontrenderer.getStringWidth(s) / 2;
                Tessellator tessellator = Tessellator.getInstance();
                WorldRenderer worldrenderer = tessellator.getWorldRenderer();
-               worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
-               worldrenderer.pos((double)(-i - 1), -1.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
-               worldrenderer.pos((double)(-i - 1), 8.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
-               worldrenderer.pos((double)(i + 1), 8.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
-               worldrenderer.pos((double)(i + 1), -1.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+               worldrenderer.begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_COLOR);
+               worldrenderer.pos(-i - 1, -1.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+               worldrenderer.pos(-i - 1, 8.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+               worldrenderer.pos(i + 1, 8.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+               worldrenderer.pos(i + 1, -1.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
                tessellator.draw();
                GlStateManager.enableTexture2D();
                GlStateManager.depthMask(true);
@@ -456,36 +471,38 @@
                GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
                GlStateManager.popMatrix();
             } else {
-               this.renderOffsetLivingLabel(entity, x, y - (entity.isChild()?(double)(entity.height / 2.0F):0.0D), z, s, 0.02666667F, d0);
+               renderOffsetLivingLabel(entity, x, y - (entity.isChild() ? (double) (entity.height / 2.0F) : 0.0D), z, s, 0.02666667F, d0);
             }
-
          }
       }
    }
 
    protected boolean canRenderName(T entity) {
+      if (Settings.BETTERF1 && Minecraft.getMinecraft().gameSettings.hideGUI) return false;
       EntityPlayerSP entityplayersp = Minecraft.getMinecraft().thePlayer;
-      if(entity instanceof EntityPlayer && entity != entityplayersp) {
+
+      if (entity instanceof EntityPlayer) {
          Team team = entity.getTeam();
          Team team1 = entityplayersp.getTeam();
-         if(team != null) {
+
+         if (team != null) {
             Team.EnumVisible team$enumvisible = team.getNameTagVisibility();
-            switch(team$enumvisible) {
-            case ALWAYS:
-               return true;
-            case NEVER:
-               return false;
-            case HIDE_FOR_OTHER_TEAMS:
-               return team1 == null || team.isSameTeam(team1);
-            case HIDE_FOR_OWN_TEAM:
-               return team1 == null || !team.isSameTeam(team1);
-            default:
-               return true;
+
+            switch (team$enumvisible) {
+               case NEVER:
+                  return false;
+               case HIDE_FOR_OTHER_TEAMS:
+                  return team1 == null || team.isSameTeam(team1);
+               case HIDE_FOR_OWN_TEAM:
+                  return team1 == null || !team.isSameTeam(team1);
+               case ALWAYS:
+               default:
+                  return true;
             }
          }
       }
 
-      return Minecraft.isGuiEnabled() && entity != this.renderManager.livingPlayer && !entity.isInvisibleToPlayer(entityplayersp) && entity.riddenByEntity == null;
+      return Minecraft.isGuiEnabled() && entity != renderManager.livingPlayer && !entity.isInvisibleToPlayer(entityplayersp) && entity.riddenByEntity == null;
    }
 
    public void setRenderOutlines(boolean renderOutlinesIn) {
@@ -501,4 +518,9 @@
 
       textureBrightness.updateDynamicTexture();
    }
+
+   @Override
+   public boolean shouldRender(T livingEntity, ICamera camera, double camX, double camY, double camZ) {
+      return super.shouldRender(livingEntity, camera, camX, camY, camZ);
+   }
 }
