--- original/net/minecraft/client/gui/GuiNewChat.java
+++ changed/net/minecraft/client/gui/GuiNewChat.java
@@ -1,14 +1,10 @@
 package net.minecraft.client.gui;
 
+import cc.hyperium.config.Settings;
+import cc.hyperium.event.EventBus;
+import cc.hyperium.event.network.chat.ChatEvent;
 import com.google.common.collect.Lists;
-import java.util.Iterator;
-import java.util.List;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.ChatLine;
-import net.minecraft.client.gui.Gui;
-import net.minecraft.client.gui.GuiChat;
-import net.minecraft.client.gui.GuiUtilRenderComponents;
-import net.minecraft.client.gui.ScaledResolution;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.ChatComponentText;
@@ -19,6 +15,9 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.util.Iterator;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
 public class GuiNewChat extends Gui {
    private static final Logger logger = LogManager.getLogger();
@@ -34,47 +33,48 @@
    }
 
    public void drawChat(int updateCounter) {
-      if(this.mc.gameSettings.chatVisibility != EntityPlayer.EnumChatVisibility.HIDDEN) {
-         int i = this.getLineCount();
+      if (mc.gameSettings.chatVisibility != EntityPlayer.EnumChatVisibility.HIDDEN) {
+         int i = getLineCount();
          boolean flag = false;
          int j = 0;
-         int k = this.drawnChatLines.size();
-         float f = this.mc.gameSettings.chatOpacity * 0.9F + 0.1F;
-         if(k > 0) {
-            if(this.getChatOpen()) {
-               flag = true;
-            }
+         int k = drawnChatLines.size();
+         float f = mc.gameSettings.chatOpacity * 0.9F + 0.1F;
 
-            float f1 = this.getChatScale();
-            int l = MathHelper.ceiling_float_int((float)this.getChatWidth() / f1);
+         if (k > 0) {
+            if (getChatOpen()) flag = true;
+
+            float f1 = getChatScale();
+            int l = MathHelper.ceiling_float_int((float) getChatWidth() / f1);
             GlStateManager.pushMatrix();
             GlStateManager.translate(2.0F, 20.0F, 0.0F);
             GlStateManager.scale(f1, f1, 1.0F);
 
-            for(int i1 = 0; i1 + this.scrollPos < this.drawnChatLines.size() && i1 < i; ++i1) {
-               ChatLine chatline = (ChatLine)this.drawnChatLines.get(i1 + this.scrollPos);
-               if(chatline != null) {
+            for (int i1 = 0; i1 + scrollPos < drawnChatLines.size() && i1 < i; ++i1) {
+               ChatLine chatline = drawnChatLines.get(i1 + scrollPos);
+
+               if (chatline != null) {
                   int j1 = updateCounter - chatline.getUpdatedCounter();
-                  if(j1 < 200 || flag) {
-                     double d0 = (double)j1 / 200.0D;
+
+                  if (j1 < 200 || flag) {
+                     double d0 = (double) j1 / 200.0D;
                      d0 = 1.0D - d0;
                      d0 = d0 * 10.0D;
                      d0 = MathHelper.clamp_double(d0, 0.0D, 1.0D);
                      d0 = d0 * d0;
-                     int l1 = (int)(255.0D * d0);
-                     if(flag) {
-                        l1 = 255;
-                     }
+                     int l1 = (int) (255.0D * d0);
 
-                     l1 = (int)((float)l1 * f);
+                     if (flag) l1 = 255;
+
+                     l1 = (int) ((float) l1 * f);
                      ++j;
-                     if(l1 > 3) {
+
+                     if (l1 > 3) {
                         int i2 = 0;
                         int j2 = -i1 * 9;
-                        drawRect(i2, j2 - 9, i2 + l + 4, j2, l1 / 2 << 24);
+                        if (!Settings.FASTCHAT) Gui.drawRect(i2, j2 - 9, i2 + l + 4, j2, l1 / 2 << 24);
                         String s = chatline.getChatComponent().getFormattedText();
                         GlStateManager.enableBlend();
-                        this.mc.fontRendererObj.drawStringWithShadow(s, (float)i2, (float)(j2 - 8), 16777215 + (l1 << 24));
+                        mc.fontRendererObj.drawStringWithShadow(s, (float) i2, (float) (j2 - 8), 16777215 + (l1 << 24));
                         GlStateManager.disableAlpha();
                         GlStateManager.disableBlend();
                      }
@@ -82,18 +82,19 @@
                }
             }
 
-            if(flag) {
-               int k2 = this.mc.fontRendererObj.FONT_HEIGHT;
+            if (flag) {
+               int k2 = mc.fontRendererObj.FONT_HEIGHT;
                GlStateManager.translate(-3.0F, 0.0F, 0.0F);
                int l2 = k * k2 + k;
                int i3 = j * k2 + j;
-               int j3 = this.scrollPos * i3 / k;
+               int j3 = scrollPos * i3 / k;
                int k1 = i3 * i3 / l2;
-               if(l2 != i3) {
-                  int k3 = j3 > 0?170:96;
-                  int l3 = this.isScrolled?13382451:3355562;
-                  drawRect(0, -j3, 2, -j3 - k1, l3 + (k3 << 24));
-                  drawRect(2, -j3, 1, -j3 - k1, 13421772 + (k3 << 24));
+
+               if (l2 != i3) {
+                  int k3 = j3 > 0 ? 170 : 96;
+                  int l3 = isScrolled ? 13382451 : 3355562;
+                  Gui.drawRect(0, -j3, 2, -j3 - k1, l3 + (k3 << 24));
+                  Gui.drawRect(2, -j3, 1, -j3 - k1, 13421772 + (k3 << 24));
                }
             }
 
@@ -112,6 +113,17 @@
    }
 
    public void printChatMessage(IChatComponent chatComponent) {
+      ChatEvent event = new ChatEvent(chatComponent);
+      EventBus.INSTANCE.post(event);
+      if (event.isCancelled()) {
+         return;
+      } else {
+         if (event.getChat() != chatComponent) {
+            printChatMessageWithOptionalDeletion(event.getChat(), 0);
+            return;
+         }
+      }
+
       this.printChatMessageWithOptionalDeletion(chatComponent, 0);
    }
 
@@ -124,32 +136,32 @@
    }
 
    private void setChatLine(IChatComponent chatComponent, int chatLineId, int updateCounter, boolean displayOnly) {
-      if(chatLineId != 0) {
-         this.deleteChatLine(chatLineId);
+      if (chatLineId != 0) {
+         deleteChatLine(chatLineId);
       }
 
-      int i = MathHelper.floor_float((float)this.getChatWidth() / this.getChatScale());
-      List<IChatComponent> list = GuiUtilRenderComponents.splitText(chatComponent, i, this.mc.fontRendererObj, false, false);
-      boolean flag = this.getChatOpen();
+      int i = MathHelper.floor_float((float) getChatWidth() / getChatScale());
+      List<IChatComponent> list = GuiUtilRenderComponents.splitText(chatComponent, i, mc.fontRendererObj, false, false);
+      boolean flag = getChatOpen();
 
-      for(IChatComponent ichatcomponent : list) {
-         if(flag && this.scrollPos > 0) {
-            this.isScrolled = true;
-            this.scroll(1);
+      for (IChatComponent ichatcomponent : list) {
+         if (flag && scrollPos > 0) {
+            isScrolled = true;
+            scroll(1);
          }
 
-         this.drawnChatLines.add(0, new ChatLine(updateCounter, ichatcomponent, chatLineId));
+         drawnChatLines.add(0, new ChatLine(updateCounter, ichatcomponent, chatLineId));
       }
 
-      while(this.drawnChatLines.size() > 100) {
-         this.drawnChatLines.remove(this.drawnChatLines.size() - 1);
+      while (drawnChatLines.size() > 500) {
+         drawnChatLines.remove(drawnChatLines.size() - 1);
       }
 
-      if(!displayOnly) {
-         this.chatLines.add(0, new ChatLine(updateCounter, chatComponent, chatLineId));
+      if (!displayOnly) {
+         chatLines.add(0, new ChatLine(updateCounter, chatComponent, chatLineId));
 
-         while(this.chatLines.size() > 100) {
-            this.chatLines.remove(this.chatLines.size() - 1);
+         while (chatLines.size() > 500) {
+            chatLines.remove(chatLines.size() - 1);
          }
       }
 
@@ -318,4 +330,12 @@
    public int getLineCount() {
       return this.getChatHeight() / 9;
    }
+
+   public List<ChatLine> getDrawnChatLines() {
+      return drawnChatLines;
+   }
+
+   public List<ChatLine> getChatLines() {
+      return chatLines;
+   }
 }
