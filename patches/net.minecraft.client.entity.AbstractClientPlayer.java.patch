--- original/net/minecraft/client/entity/AbstractClientPlayer.java
+++ changed/net/minecraft/client/entity/AbstractClientPlayer.java
@@ -1,5 +1,9 @@
 package net.minecraft.client.entity;
 
+import cc.hyperium.handlers.handlers.cape.HyperiumCapeHandler;
+import cc.hyperium.hooks.AbstractClientPlayerHook;
+import cc.hyperium.mods.nickhider.NickHider;
+import cc.hyperium.mods.nickhider.config.NickHiderConfig;
 import com.mojang.authlib.GameProfile;
 import java.io.File;
 import net.minecraft.client.Minecraft;
@@ -24,8 +28,12 @@
 public abstract class AbstractClientPlayer extends EntityPlayer {
     private NetworkPlayerInfo playerInfo;
 
+    private final HyperiumCapeHandler hook;
+
     public AbstractClientPlayer(World worldIn, GameProfile playerProfile) {
         super(worldIn, playerProfile);
+        // Hyperium
+        hook = new HyperiumCapeHandler(playerProfile);
     }
 
     /**
@@ -43,7 +51,7 @@
         return this.getPlayerInfo() != null;
     }
 
-    protected NetworkPlayerInfo getPlayerInfo() {
+    public NetworkPlayerInfo getPlayerInfo() {
         if (this.playerInfo == null) {
             this.playerInfo = Minecraft.getMinecraft().getNetHandler().getPlayerInfo(this.getUniqueID());
         }
@@ -63,11 +71,39 @@
      * Returns true if the player instance has an associated skin.
      */
     public ResourceLocation getLocationSkin() {
+        // Hyperium - NickHider
+        NickHider instance = NickHider.instance;
+        if (instance != null && instance.getNickHiderConfig().isHideSkins() && instance.getNickHiderConfig().isMasterEnabled()) {
+            NickHiderConfig config = instance.getNickHiderConfig();
+
+            if (getUniqueID().equals(Minecraft.getMinecraft().thePlayer.getUniqueID())) {
+                return config.isUseRealSkinForSelf() && instance.getPlayerSkin() != null ? instance.getPlayerSkin() : DefaultPlayerSkin.getDefaultSkin(getUniqueID());
+            } else {
+                if (config.isHideOtherSkins()) {
+                    return config.isUsePlayerSkinForAll() && instance.getPlayerSkin() != null ? instance.getPlayerSkin() : DefaultPlayerSkin.getDefaultSkin(getUniqueID());
+                }
+            }
+        }
+
         NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
         return networkplayerinfo == null ? DefaultPlayerSkin.getDefaultSkin(this.getUniqueID()) : networkplayerinfo.getLocationSkin();
     }
 
     public ResourceLocation getLocationCape() {
+        // Hyperium
+        if (hook.getLocationCape() != null) {
+            return hook.getLocationCape();
+        }
+
+        NickHider instance = NickHider.instance;
+        if (instance != null && instance.getNickHiderConfig().isHideSkins() && instance.getNickHiderConfig().isMasterEnabled()) {
+            NickHiderConfig config = instance.getNickHiderConfig();
+
+            if (getUniqueID().equals(Minecraft.getMinecraft().thePlayer.getUniqueID()) && config.isUseRealSkinForSelf()) {
+                return instance.getPlayerCape();
+            }
+        }
+
         NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
         return networkplayerinfo == null ? null : networkplayerinfo.getLocationCape();
     }
@@ -92,37 +128,24 @@
     }
 
     public String getSkinType() {
+        // Hyperium
+        NickHider instance = NickHider.instance;
+        if (instance != null && instance.getNickHiderConfig().isHideSkins() && instance.getNickHiderConfig().isMasterEnabled()) {
+            NickHiderConfig config = instance.getNickHiderConfig();
+            if (getUniqueID().equals(Minecraft.getMinecraft().thePlayer.getUniqueID())) {
+                if (config.isUseRealSkinForSelf() && instance.getPlayerSkin() != null) {
+                    return instance.getPlayerRealSkinType();
+                }
+            } else if (config.isHideOtherSkins() && config.isUsePlayerSkinForAll() && instance.getPlayerSkin() != null) {
+                return instance.getPlayerRealSkinType();
+            }
+        }
+
         NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
         return networkplayerinfo == null ? DefaultPlayerSkin.getSkinType(this.getUniqueID()) : networkplayerinfo.getSkinType();
     }
 
     public float getFovModifier() {
-        float f = 1.0F;
-
-        if (this.capabilities.isFlying) {
-            f *= 1.1F;
-        }
-
-        IAttributeInstance iattributeinstance = this.getEntityAttribute(SharedMonsterAttributes.movementSpeed);
-        f = (float)((double)f * ((iattributeinstance.getAttributeValue() / (double)this.capabilities.getWalkSpeed() + 1.0D) / 2.0D));
-
-        if (this.capabilities.getWalkSpeed() == 0.0F || Float.isNaN(f) || Float.isInfinite(f)) {
-            f = 1.0F;
-        }
-
-        if (this.isUsingItem() && this.getItemInUse().getItem() == Items.bow) {
-            int i = this.getItemInUseDuration();
-            float f1 = (float)i / 20.0F;
-
-            if (f1 > 1.0F) {
-                f1 = 1.0F;
-            } else {
-                f1 = f1 * f1;
-            }
-
-            f *= 1.0F - f1 * 0.15F;
-        }
-
-        return f;
+        return AbstractClientPlayerHook.getFovModifierHook(this);
     }
 }
