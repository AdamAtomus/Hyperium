--- original/net/minecraft/item/ItemBow.java
+++ changed/net/minecraft/item/ItemBow.java
@@ -1,5 +1,7 @@
 package net.minecraft.item;
 
+import cc.hyperium.event.EventBus;
+import cc.hyperium.event.entity.ArrowShootEvent;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.enchantment.EnchantmentHelper;
@@ -25,52 +27,37 @@
     * Called when the player stops using an Item (stops holding the right mouse button).
     */
    public void onPlayerStoppedUsing(ItemStack stack, World worldIn, EntityPlayer playerIn, int timeLeft) {
-      boolean flag = playerIn.capabilities.isCreativeMode || EnchantmentHelper.getEnchantmentLevel(Enchantment.infinity.effectId, stack) > 0;
-      if(flag || playerIn.inventory.hasItem(Items.arrow)) {
-         int i = this.getMaxItemUseDuration(stack) - timeLeft;
-         float f = (float)i / 20.0F;
-         f = (f * f + f * 2.0F) / 3.0F;
-         if((double)f < 0.1D) {
-            return;
-         }
+      boolean infiniteArrows = playerIn.capabilities.isCreativeMode || EnchantmentHelper.getEnchantmentLevel(Enchantment.infinity.effectId, stack) > 0;
+      if (infiniteArrows || playerIn.inventory.hasItem(Items.arrow)) {
+         int maxTime = getMaxItemUseDuration(stack) - timeLeft;
+         float pullBackTime = (float) maxTime / 20.0F;
+         pullBackTime = (pullBackTime * pullBackTime + pullBackTime * 2.0F) / 3.0F;
+         if ((double) pullBackTime < 0.1D) return;
 
-         if(f > 1.0F) {
-            f = 1.0F;
-         }
+         if (pullBackTime > 1.0F) pullBackTime = 1.0F;
 
-         EntityArrow entityarrow = new EntityArrow(worldIn, playerIn, f * 2.0F);
-         if(f == 1.0F) {
-            entityarrow.setIsCritical(true);
-         }
+         EntityArrow arrow = new EntityArrow(worldIn, playerIn, pullBackTime * 2.0F);
+         if (pullBackTime == 1.0F) arrow.setIsCritical(true);
 
-         int j = EnchantmentHelper.getEnchantmentLevel(Enchantment.power.effectId, stack);
-         if(j > 0) {
-            entityarrow.setDamage(entityarrow.getDamage() + (double)j * 0.5D + 0.5D);
-         }
+         int powerEnchantmentLevel = EnchantmentHelper.getEnchantmentLevel(Enchantment.power.effectId, stack);
+         if (powerEnchantmentLevel > 0) arrow.setDamage(arrow.getDamage() + (double) powerEnchantmentLevel * 0.5D + 0.5D);
 
-         int k = EnchantmentHelper.getEnchantmentLevel(Enchantment.punch.effectId, stack);
-         if(k > 0) {
-            entityarrow.setKnockbackStrength(k);
-         }
+         int punchEnchantmentLevel = EnchantmentHelper.getEnchantmentLevel(Enchantment.punch.effectId, stack);
+         if (punchEnchantmentLevel > 0) arrow.setKnockbackStrength(punchEnchantmentLevel);
 
-         if(EnchantmentHelper.getEnchantmentLevel(Enchantment.flame.effectId, stack) > 0) {
-            entityarrow.setFire(100);
+         if (EnchantmentHelper.getEnchantmentLevel(Enchantment.flame.effectId, stack) > 0) {
+            arrow.setFire(100);
          }
 
          stack.damageItem(1, playerIn);
-         worldIn.playSoundAtEntity(playerIn, "random.bow", 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 1.2F) + f * 0.5F);
-         if(flag) {
-            entityarrow.canBePickedUp = 2;
-         } else {
-            playerIn.inventory.consumeInventoryItem(Items.arrow);
-         }
+         worldIn.playSoundAtEntity(playerIn, "random.bow", 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 1.2F) + pullBackTime * 0.5F);
+         if (infiniteArrows) arrow.canBePickedUp = 2;
+         else playerIn.inventory.consumeInventoryItem(Items.arrow);
 
-         playerIn.triggerAchievement(StatList.objectUseStats[Item.getIdFromItem(this)]);
-         if(!worldIn.isRemote) {
-            worldIn.spawnEntityInWorld(entityarrow);
-         }
+         playerIn.triggerAchievement(StatList.objectUseStats[Item.getIdFromItem((ItemBow) (Object) this)]);
+         if (!worldIn.isRemote) worldIn.spawnEntityInWorld(arrow);
+         EventBus.INSTANCE.post(new ArrowShootEvent(arrow, maxTime, stack));
       }
-
    }
 
    /**
